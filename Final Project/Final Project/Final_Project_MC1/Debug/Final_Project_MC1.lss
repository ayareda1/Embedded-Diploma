
Final_Project_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000200c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  00800060  0000200c  00002080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000019b0  00000000  00000000  000020c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000bcc  00000000  00000000  00003a78  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00004644  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00004784  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000048f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  0000653d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00007428  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000081d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008338  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000085c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00008d93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e0       	ldi	r30, 0x0C	; 12
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 3a       	cpi	r26, 0xA8	; 168
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 04 10 	jmp	0x2008	; 0x2008 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a8 e9       	ldi	r26, 0x98	; 152
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	88 e9       	ldi	r24, 0x98	; 152
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 a4 0f 	jmp	0x1f48	; 0x1f48 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 94 0f 	jmp	0x1f28	; 0x1f28 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 b0 0f 	jmp	0x1f60	; 0x1f60 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 98 0f 	jmp	0x1f30	; 0x1f30 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 b4 0f 	jmp	0x1f68	; 0x1f68 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
#define FLAG 0x20
#define PASSWARD_SIZE 4
#define FULL_WAVE_STEPS 2

int main()
{
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	df 93       	push	r29
     b3c:	cf 93       	push	r28
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	c9 54       	subi	r28, 0x49	; 73
     b44:	d0 40       	sbci	r29, 0x00	; 0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
	LCD_init();
     b50:	0e 94 bc 0e 	call	0x1d78	; 0x1d78 <LCD_init>
	USART_INIT();
     b54:	0e 94 07 08 	call	0x100e	; 0x100e <USART_INIT>
	DDRB |=0x0F;
     b58:	a7 e3       	ldi	r26, 0x37	; 55
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	e7 e3       	ldi	r30, 0x37	; 55
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	8f 60       	ori	r24, 0x0F	; 15
     b64:	8c 93       	st	X, r24
	PORTB &= 0xF0;
     b66:	a8 e3       	ldi	r26, 0x38	; 56
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e8 e3       	ldi	r30, 0x38	; 56
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	80 7f       	andi	r24, 0xF0	; 240
     b72:	8c 93       	st	X, r24
	unsigned char motor_steps[FULL_WAVE_STEPS] = {3};
     b74:	1c aa       	std	Y+52, r1	; 0x34
     b76:	1b aa       	std	Y+51, r1	; 0x33
     b78:	83 e0       	ldi	r24, 0x03	; 3
     b7a:	8b ab       	std	Y+51, r24	; 0x33
	int PASSWARD[PASSWARD_SIZE]= {1,2,3,4} , Correct_Pass=1 ,flag=0;
     b7c:	ce 01       	movw	r24, r28
     b7e:	c5 96       	adiw	r24, 0x35	; 53
     b80:	27 96       	adiw	r28, 0x07	; 7
     b82:	9f af       	std	Y+63, r25	; 0x3f
     b84:	8e af       	std	Y+62, r24	; 0x3e
     b86:	27 97       	sbiw	r28, 0x07	; 7
     b88:	e0 ea       	ldi	r30, 0xA0	; 160
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	29 96       	adiw	r28, 0x09	; 9
     b8e:	ff af       	std	Y+63, r31	; 0x3f
     b90:	ee af       	std	Y+62, r30	; 0x3e
     b92:	29 97       	sbiw	r28, 0x09	; 9
     b94:	f8 e0       	ldi	r31, 0x08	; 8
     b96:	2a 96       	adiw	r28, 0x0a	; 10
     b98:	ff af       	std	Y+63, r31	; 0x3f
     b9a:	2a 97       	sbiw	r28, 0x0a	; 10
     b9c:	29 96       	adiw	r28, 0x09	; 9
     b9e:	ee ad       	ldd	r30, Y+62	; 0x3e
     ba0:	ff ad       	ldd	r31, Y+63	; 0x3f
     ba2:	29 97       	sbiw	r28, 0x09	; 9
     ba4:	00 80       	ld	r0, Z
     ba6:	29 96       	adiw	r28, 0x09	; 9
     ba8:	8e ad       	ldd	r24, Y+62	; 0x3e
     baa:	9f ad       	ldd	r25, Y+63	; 0x3f
     bac:	29 97       	sbiw	r28, 0x09	; 9
     bae:	01 96       	adiw	r24, 0x01	; 1
     bb0:	29 96       	adiw	r28, 0x09	; 9
     bb2:	9f af       	std	Y+63, r25	; 0x3f
     bb4:	8e af       	std	Y+62, r24	; 0x3e
     bb6:	29 97       	sbiw	r28, 0x09	; 9
     bb8:	27 96       	adiw	r28, 0x07	; 7
     bba:	ee ad       	ldd	r30, Y+62	; 0x3e
     bbc:	ff ad       	ldd	r31, Y+63	; 0x3f
     bbe:	27 97       	sbiw	r28, 0x07	; 7
     bc0:	00 82       	st	Z, r0
     bc2:	27 96       	adiw	r28, 0x07	; 7
     bc4:	8e ad       	ldd	r24, Y+62	; 0x3e
     bc6:	9f ad       	ldd	r25, Y+63	; 0x3f
     bc8:	27 97       	sbiw	r28, 0x07	; 7
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	27 96       	adiw	r28, 0x07	; 7
     bce:	9f af       	std	Y+63, r25	; 0x3f
     bd0:	8e af       	std	Y+62, r24	; 0x3e
     bd2:	27 97       	sbiw	r28, 0x07	; 7
     bd4:	2a 96       	adiw	r28, 0x0a	; 10
     bd6:	9f ad       	ldd	r25, Y+63	; 0x3f
     bd8:	2a 97       	sbiw	r28, 0x0a	; 10
     bda:	91 50       	subi	r25, 0x01	; 1
     bdc:	2a 96       	adiw	r28, 0x0a	; 10
     bde:	9f af       	std	Y+63, r25	; 0x3f
     be0:	2a 97       	sbiw	r28, 0x0a	; 10
     be2:	2a 96       	adiw	r28, 0x0a	; 10
     be4:	ef ad       	ldd	r30, Y+63	; 0x3f
     be6:	2a 97       	sbiw	r28, 0x0a	; 10
     be8:	ee 23       	and	r30, r30
     bea:	c1 f6       	brne	.-80     	; 0xb9c <main+0x66>
     bec:	81 e0       	ldi	r24, 0x01	; 1
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	9a ab       	std	Y+50, r25	; 0x32
     bf2:	89 ab       	std	Y+49, r24	; 0x31
     bf4:	18 aa       	std	Y+48, r1	; 0x30
     bf6:	1f a6       	std	Y+47, r1	; 0x2f
	int Entered_Passward[PASSWARD_SIZE];
	LCD_DisplayString("Enter Passward:");
     bf8:	80 e6       	ldi	r24, 0x60	; 96
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_DisplayString>

	while(1)
	{
		if(flag==0)
     c00:	8f a5       	ldd	r24, Y+47	; 0x2f
     c02:	98 a9       	ldd	r25, Y+48	; 0x30
     c04:	00 97       	sbiw	r24, 0x00	; 0
     c06:	09 f0       	breq	.+2      	; 0xc0a <main+0xd4>
     c08:	9a c0       	rjmp	.+308    	; 0xd3e <main+0x208>
		{
			for(int i=0; i<PASSWARD_SIZE; i++)
     c0a:	1e a6       	std	Y+46, r1	; 0x2e
     c0c:	1d a6       	std	Y+45, r1	; 0x2d
     c0e:	91 c0       	rjmp	.+290    	; 0xd32 <main+0x1fc>
			{
				Entered_Passward[i] = KeyPad_GetPressKey(3,4);
     c10:	0d a5       	ldd	r16, Y+45	; 0x2d
     c12:	1e a5       	ldd	r17, Y+46	; 0x2e
     c14:	83 e0       	ldi	r24, 0x03	; 3
     c16:	64 e0       	ldi	r22, 0x04	; 4
     c18:	0e 94 b3 08 	call	0x1166	; 0x1166 <KeyPad_GetPressKey>
     c1c:	ac 01       	movw	r20, r24
     c1e:	98 01       	movw	r18, r16
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	ce 01       	movw	r24, r28
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	82 0f       	add	r24, r18
     c2a:	93 1f       	adc	r25, r19
     c2c:	fc 01       	movw	r30, r24
     c2e:	fc 96       	adiw	r30, 0x3c	; 60
     c30:	51 83       	std	Z+1, r21	; 0x01
     c32:	40 83       	st	Z, r20
				LCD_DisplayStringRowCol(1,i,"*");
     c34:	9d a5       	ldd	r25, Y+45	; 0x2d
     c36:	20 e7       	ldi	r18, 0x70	; 112
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	81 e0       	ldi	r24, 0x01	; 1
     c3c:	69 2f       	mov	r22, r25
     c3e:	a9 01       	movw	r20, r18
     c40:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_DisplayStringRowCol>
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	a6 e9       	ldi	r26, 0x96	; 150
     c4a:	b3 e4       	ldi	r27, 0x43	; 67
     c4c:	8f a3       	std	Y+39, r24	; 0x27
     c4e:	98 a7       	std	Y+40, r25	; 0x28
     c50:	a9 a7       	std	Y+41, r26	; 0x29
     c52:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c54:	6f a1       	ldd	r22, Y+39	; 0x27
     c56:	78 a5       	ldd	r23, Y+40	; 0x28
     c58:	89 a5       	ldd	r24, Y+41	; 0x29
     c5a:	9a a5       	ldd	r25, Y+42	; 0x2a
     c5c:	20 e0       	ldi	r18, 0x00	; 0
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	4a e7       	ldi	r20, 0x7A	; 122
     c62:	53 e4       	ldi	r21, 0x43	; 67
     c64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	8b a3       	std	Y+35, r24	; 0x23
     c6e:	9c a3       	std	Y+36, r25	; 0x24
     c70:	ad a3       	std	Y+37, r26	; 0x25
     c72:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     c74:	6b a1       	ldd	r22, Y+35	; 0x23
     c76:	7c a1       	ldd	r23, Y+36	; 0x24
     c78:	8d a1       	ldd	r24, Y+37	; 0x25
     c7a:	9e a1       	ldd	r25, Y+38	; 0x26
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	40 e8       	ldi	r20, 0x80	; 128
     c82:	5f e3       	ldi	r21, 0x3F	; 63
     c84:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c88:	88 23       	and	r24, r24
     c8a:	2c f4       	brge	.+10     	; 0xc96 <main+0x160>
		__ticks = 1;
     c8c:	81 e0       	ldi	r24, 0x01	; 1
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	9a a3       	std	Y+34, r25	; 0x22
     c92:	89 a3       	std	Y+33, r24	; 0x21
     c94:	3f c0       	rjmp	.+126    	; 0xd14 <main+0x1de>
	else if (__tmp > 65535)
     c96:	6b a1       	ldd	r22, Y+35	; 0x23
     c98:	7c a1       	ldd	r23, Y+36	; 0x24
     c9a:	8d a1       	ldd	r24, Y+37	; 0x25
     c9c:	9e a1       	ldd	r25, Y+38	; 0x26
     c9e:	20 e0       	ldi	r18, 0x00	; 0
     ca0:	3f ef       	ldi	r19, 0xFF	; 255
     ca2:	4f e7       	ldi	r20, 0x7F	; 127
     ca4:	57 e4       	ldi	r21, 0x47	; 71
     ca6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     caa:	18 16       	cp	r1, r24
     cac:	4c f5       	brge	.+82     	; 0xd00 <main+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cae:	6f a1       	ldd	r22, Y+39	; 0x27
     cb0:	78 a5       	ldd	r23, Y+40	; 0x28
     cb2:	89 a5       	ldd	r24, Y+41	; 0x29
     cb4:	9a a5       	ldd	r25, Y+42	; 0x2a
     cb6:	20 e0       	ldi	r18, 0x00	; 0
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	40 e2       	ldi	r20, 0x20	; 32
     cbc:	51 e4       	ldi	r21, 0x41	; 65
     cbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cc2:	dc 01       	movw	r26, r24
     cc4:	cb 01       	movw	r24, r22
     cc6:	bc 01       	movw	r22, r24
     cc8:	cd 01       	movw	r24, r26
     cca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     cce:	dc 01       	movw	r26, r24
     cd0:	cb 01       	movw	r24, r22
     cd2:	9a a3       	std	Y+34, r25	; 0x22
     cd4:	89 a3       	std	Y+33, r24	; 0x21
     cd6:	0f c0       	rjmp	.+30     	; 0xcf6 <main+0x1c0>
     cd8:	89 e1       	ldi	r24, 0x19	; 25
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	98 a3       	std	Y+32, r25	; 0x20
     cde:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ce0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ce2:	98 a1       	ldd	r25, Y+32	; 0x20
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	f1 f7       	brne	.-4      	; 0xce4 <main+0x1ae>
     ce8:	98 a3       	std	Y+32, r25	; 0x20
     cea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cec:	89 a1       	ldd	r24, Y+33	; 0x21
     cee:	9a a1       	ldd	r25, Y+34	; 0x22
     cf0:	01 97       	sbiw	r24, 0x01	; 1
     cf2:	9a a3       	std	Y+34, r25	; 0x22
     cf4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cf6:	89 a1       	ldd	r24, Y+33	; 0x21
     cf8:	9a a1       	ldd	r25, Y+34	; 0x22
     cfa:	00 97       	sbiw	r24, 0x00	; 0
     cfc:	69 f7       	brne	.-38     	; 0xcd8 <main+0x1a2>
     cfe:	14 c0       	rjmp	.+40     	; 0xd28 <main+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d00:	6b a1       	ldd	r22, Y+35	; 0x23
     d02:	7c a1       	ldd	r23, Y+36	; 0x24
     d04:	8d a1       	ldd	r24, Y+37	; 0x25
     d06:	9e a1       	ldd	r25, Y+38	; 0x26
     d08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d0c:	dc 01       	movw	r26, r24
     d0e:	cb 01       	movw	r24, r22
     d10:	9a a3       	std	Y+34, r25	; 0x22
     d12:	89 a3       	std	Y+33, r24	; 0x21
     d14:	89 a1       	ldd	r24, Y+33	; 0x21
     d16:	9a a1       	ldd	r25, Y+34	; 0x22
     d18:	9e 8f       	std	Y+30, r25	; 0x1e
     d1a:	8d 8f       	std	Y+29, r24	; 0x1d
     d1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	f1 f7       	brne	.-4      	; 0xd20 <main+0x1ea>
     d24:	9e 8f       	std	Y+30, r25	; 0x1e
     d26:	8d 8f       	std	Y+29, r24	; 0x1d

	while(1)
	{
		if(flag==0)
		{
			for(int i=0; i<PASSWARD_SIZE; i++)
     d28:	8d a5       	ldd	r24, Y+45	; 0x2d
     d2a:	9e a5       	ldd	r25, Y+46	; 0x2e
     d2c:	01 96       	adiw	r24, 0x01	; 1
     d2e:	9e a7       	std	Y+46, r25	; 0x2e
     d30:	8d a7       	std	Y+45, r24	; 0x2d
     d32:	8d a5       	ldd	r24, Y+45	; 0x2d
     d34:	9e a5       	ldd	r25, Y+46	; 0x2e
     d36:	84 30       	cpi	r24, 0x04	; 4
     d38:	91 05       	cpc	r25, r1
     d3a:	0c f4       	brge	.+2      	; 0xd3e <main+0x208>
     d3c:	69 cf       	rjmp	.-302    	; 0xc10 <main+0xda>
				LCD_DisplayStringRowCol(1,i,"*");
				_delay_ms(300);
			}
		}

		flag=1;
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	98 ab       	std	Y+48, r25	; 0x30
     d44:	8f a7       	std	Y+47, r24	; 0x2f
		if(flag == 1 )
     d46:	8f a5       	ldd	r24, Y+47	; 0x2f
     d48:	98 a9       	ldd	r25, Y+48	; 0x30
     d4a:	81 30       	cpi	r24, 0x01	; 1
     d4c:	91 05       	cpc	r25, r1
     d4e:	09 f0       	breq	.+2      	; 0xd52 <main+0x21c>
     d50:	5b c1       	rjmp	.+694    	; 0x1008 <main+0x4d2>
		{
			for(int i=0; i<PASSWARD_SIZE; i++)
     d52:	1c a6       	std	Y+44, r1	; 0x2c
     d54:	1b a6       	std	Y+43, r1	; 0x2b
     d56:	2a c0       	rjmp	.+84     	; 0xdac <main+0x276>
			{
				if(Entered_Passward[i] == PASSWARD[i])
     d58:	8b a5       	ldd	r24, Y+43	; 0x2b
     d5a:	9c a5       	ldd	r25, Y+44	; 0x2c
     d5c:	9c 01       	movw	r18, r24
     d5e:	22 0f       	add	r18, r18
     d60:	33 1f       	adc	r19, r19
     d62:	ce 01       	movw	r24, r28
     d64:	01 96       	adiw	r24, 0x01	; 1
     d66:	82 0f       	add	r24, r18
     d68:	93 1f       	adc	r25, r19
     d6a:	fc 01       	movw	r30, r24
     d6c:	fc 96       	adiw	r30, 0x3c	; 60
     d6e:	40 81       	ld	r20, Z
     d70:	51 81       	ldd	r21, Z+1	; 0x01
     d72:	8b a5       	ldd	r24, Y+43	; 0x2b
     d74:	9c a5       	ldd	r25, Y+44	; 0x2c
     d76:	9c 01       	movw	r18, r24
     d78:	22 0f       	add	r18, r18
     d7a:	33 1f       	adc	r19, r19
     d7c:	ce 01       	movw	r24, r28
     d7e:	01 96       	adiw	r24, 0x01	; 1
     d80:	82 0f       	add	r24, r18
     d82:	93 1f       	adc	r25, r19
     d84:	fc 01       	movw	r30, r24
     d86:	f4 96       	adiw	r30, 0x34	; 52
     d88:	80 81       	ld	r24, Z
     d8a:	91 81       	ldd	r25, Z+1	; 0x01
     d8c:	48 17       	cp	r20, r24
     d8e:	59 07       	cpc	r21, r25
     d90:	51 f4       	brne	.+20     	; 0xda6 <main+0x270>
				{
					Correct_Pass=1;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	9a ab       	std	Y+50, r25	; 0x32
     d98:	89 ab       	std	Y+49, r24	; 0x31
		}

		flag=1;
		if(flag == 1 )
		{
			for(int i=0; i<PASSWARD_SIZE; i++)
     d9a:	8b a5       	ldd	r24, Y+43	; 0x2b
     d9c:	9c a5       	ldd	r25, Y+44	; 0x2c
     d9e:	01 96       	adiw	r24, 0x01	; 1
     da0:	9c a7       	std	Y+44, r25	; 0x2c
     da2:	8b a7       	std	Y+43, r24	; 0x2b
     da4:	03 c0       	rjmp	.+6      	; 0xdac <main+0x276>
				{
					Correct_Pass=1;
				}
				else
				{
					Correct_Pass=0;
     da6:	1a aa       	std	Y+50, r1	; 0x32
     da8:	19 aa       	std	Y+49, r1	; 0x31
     daa:	05 c0       	rjmp	.+10     	; 0xdb6 <main+0x280>
		}

		flag=1;
		if(flag == 1 )
		{
			for(int i=0; i<PASSWARD_SIZE; i++)
     dac:	8b a5       	ldd	r24, Y+43	; 0x2b
     dae:	9c a5       	ldd	r25, Y+44	; 0x2c
     db0:	84 30       	cpi	r24, 0x04	; 4
     db2:	91 05       	cpc	r25, r1
     db4:	8c f2       	brlt	.-94     	; 0xd58 <main+0x222>
					Correct_Pass=0;
					break;
				}
			}

			if(Correct_Pass == 0)
     db6:	89 a9       	ldd	r24, Y+49	; 0x31
     db8:	9a a9       	ldd	r25, Y+50	; 0x32
     dba:	00 97       	sbiw	r24, 0x00	; 0
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <main+0x28a>
     dbe:	8d c0       	rjmp	.+282    	; 0xeda <main+0x3a4>
			{
				LCD_ClearScreen();
     dc0:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_ClearScreen>
				LCD_DisplayStringRowCol(0,0,"Wrong Password");
     dc4:	22 e7       	ldi	r18, 0x72	; 114
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	80 e0       	ldi	r24, 0x00	; 0
     dca:	60 e0       	ldi	r22, 0x00	; 0
     dcc:	a9 01       	movw	r20, r18
     dce:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_DisplayStringRowCol>
				LCD_DisplayStringRowCol(1,0,"Try Again");
     dd2:	21 e8       	ldi	r18, 0x81	; 129
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	60 e0       	ldi	r22, 0x00	; 0
     dda:	a9 01       	movw	r20, r18
     ddc:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_DisplayStringRowCol>
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	aa e7       	ldi	r26, 0x7A	; 122
     de6:	b4 e4       	ldi	r27, 0x44	; 68
     de8:	89 8f       	std	Y+25, r24	; 0x19
     dea:	9a 8f       	std	Y+26, r25	; 0x1a
     dec:	ab 8f       	std	Y+27, r26	; 0x1b
     dee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     df0:	69 8d       	ldd	r22, Y+25	; 0x19
     df2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     df4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     df6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	4a e7       	ldi	r20, 0x7A	; 122
     dfe:	53 e4       	ldi	r21, 0x43	; 67
     e00:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	8d 8b       	std	Y+21, r24	; 0x15
     e0a:	9e 8b       	std	Y+22, r25	; 0x16
     e0c:	af 8b       	std	Y+23, r26	; 0x17
     e0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e10:	6d 89       	ldd	r22, Y+21	; 0x15
     e12:	7e 89       	ldd	r23, Y+22	; 0x16
     e14:	8f 89       	ldd	r24, Y+23	; 0x17
     e16:	98 8d       	ldd	r25, Y+24	; 0x18
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e8       	ldi	r20, 0x80	; 128
     e1e:	5f e3       	ldi	r21, 0x3F	; 63
     e20:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e24:	88 23       	and	r24, r24
     e26:	2c f4       	brge	.+10     	; 0xe32 <main+0x2fc>
		__ticks = 1;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	9c 8b       	std	Y+20, r25	; 0x14
     e2e:	8b 8b       	std	Y+19, r24	; 0x13
     e30:	3f c0       	rjmp	.+126    	; 0xeb0 <main+0x37a>
	else if (__tmp > 65535)
     e32:	6d 89       	ldd	r22, Y+21	; 0x15
     e34:	7e 89       	ldd	r23, Y+22	; 0x16
     e36:	8f 89       	ldd	r24, Y+23	; 0x17
     e38:	98 8d       	ldd	r25, Y+24	; 0x18
     e3a:	20 e0       	ldi	r18, 0x00	; 0
     e3c:	3f ef       	ldi	r19, 0xFF	; 255
     e3e:	4f e7       	ldi	r20, 0x7F	; 127
     e40:	57 e4       	ldi	r21, 0x47	; 71
     e42:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e46:	18 16       	cp	r1, r24
     e48:	4c f5       	brge	.+82     	; 0xe9c <main+0x366>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e4a:	69 8d       	ldd	r22, Y+25	; 0x19
     e4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e50:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	40 e2       	ldi	r20, 0x20	; 32
     e58:	51 e4       	ldi	r21, 0x41	; 65
     e5a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e5e:	dc 01       	movw	r26, r24
     e60:	cb 01       	movw	r24, r22
     e62:	bc 01       	movw	r22, r24
     e64:	cd 01       	movw	r24, r26
     e66:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	9c 8b       	std	Y+20, r25	; 0x14
     e70:	8b 8b       	std	Y+19, r24	; 0x13
     e72:	0f c0       	rjmp	.+30     	; 0xe92 <main+0x35c>
     e74:	89 e1       	ldi	r24, 0x19	; 25
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	9a 8b       	std	Y+18, r25	; 0x12
     e7a:	89 8b       	std	Y+17, r24	; 0x11
     e7c:	89 89       	ldd	r24, Y+17	; 0x11
     e7e:	9a 89       	ldd	r25, Y+18	; 0x12
     e80:	01 97       	sbiw	r24, 0x01	; 1
     e82:	f1 f7       	brne	.-4      	; 0xe80 <main+0x34a>
     e84:	9a 8b       	std	Y+18, r25	; 0x12
     e86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e88:	8b 89       	ldd	r24, Y+19	; 0x13
     e8a:	9c 89       	ldd	r25, Y+20	; 0x14
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	9c 8b       	std	Y+20, r25	; 0x14
     e90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e92:	8b 89       	ldd	r24, Y+19	; 0x13
     e94:	9c 89       	ldd	r25, Y+20	; 0x14
     e96:	00 97       	sbiw	r24, 0x00	; 0
     e98:	69 f7       	brne	.-38     	; 0xe74 <main+0x33e>
     e9a:	14 c0       	rjmp	.+40     	; 0xec4 <main+0x38e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e9c:	6d 89       	ldd	r22, Y+21	; 0x15
     e9e:	7e 89       	ldd	r23, Y+22	; 0x16
     ea0:	8f 89       	ldd	r24, Y+23	; 0x17
     ea2:	98 8d       	ldd	r25, Y+24	; 0x18
     ea4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	9c 8b       	std	Y+20, r25	; 0x14
     eae:	8b 8b       	std	Y+19, r24	; 0x13
     eb0:	8b 89       	ldd	r24, Y+19	; 0x13
     eb2:	9c 89       	ldd	r25, Y+20	; 0x14
     eb4:	98 8b       	std	Y+16, r25	; 0x10
     eb6:	8f 87       	std	Y+15, r24	; 0x0f
     eb8:	8f 85       	ldd	r24, Y+15	; 0x0f
     eba:	98 89       	ldd	r25, Y+16	; 0x10
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	f1 f7       	brne	.-4      	; 0xebc <main+0x386>
     ec0:	98 8b       	std	Y+16, r25	; 0x10
     ec2:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);
				LCD_ClearScreen();
     ec4:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_ClearScreen>
				LCD_DisplayString("Enter Passward:");
     ec8:	80 e6       	ldi	r24, 0x60	; 96
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_DisplayString>
				Correct_Pass = 1;
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	9a ab       	std	Y+50, r25	; 0x32
     ed6:	89 ab       	std	Y+49, r24	; 0x31
     ed8:	97 c0       	rjmp	.+302    	; 0x1008 <main+0x4d2>
			}
			else if(Correct_Pass == 1)
     eda:	89 a9       	ldd	r24, Y+49	; 0x31
     edc:	9a a9       	ldd	r25, Y+50	; 0x32
     ede:	81 30       	cpi	r24, 0x01	; 1
     ee0:	91 05       	cpc	r25, r1
     ee2:	09 f0       	breq	.+2      	; 0xee6 <main+0x3b0>
     ee4:	91 c0       	rjmp	.+290    	; 0x1008 <main+0x4d2>
			{
				LCD_ClearScreen();
     ee6:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <LCD_ClearScreen>
				LCD_DisplayString("Welcome Home");
     eea:	8b e8       	ldi	r24, 0x8B	; 139
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_DisplayString>
				PORTB = (PORTB & 0xF0) | (motor_steps[0] & 0x0F);
     ef2:	a8 e3       	ldi	r26, 0x38	; 56
     ef4:	b0 e0       	ldi	r27, 0x00	; 0
     ef6:	e8 e3       	ldi	r30, 0x38	; 56
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	98 2f       	mov	r25, r24
     efe:	90 7f       	andi	r25, 0xF0	; 240
     f00:	8b a9       	ldd	r24, Y+51	; 0x33
     f02:	8f 70       	andi	r24, 0x0F	; 15
     f04:	89 2b       	or	r24, r25
     f06:	8c 93       	st	X, r24
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	aa ef       	ldi	r26, 0xFA	; 250
     f0e:	b4 e4       	ldi	r27, 0x44	; 68
     f10:	8b 87       	std	Y+11, r24	; 0x0b
     f12:	9c 87       	std	Y+12, r25	; 0x0c
     f14:	ad 87       	std	Y+13, r26	; 0x0d
     f16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f18:	6b 85       	ldd	r22, Y+11	; 0x0b
     f1a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f1c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f1e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	30 e0       	ldi	r19, 0x00	; 0
     f24:	4a e7       	ldi	r20, 0x7A	; 122
     f26:	53 e4       	ldi	r21, 0x43	; 67
     f28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f2c:	dc 01       	movw	r26, r24
     f2e:	cb 01       	movw	r24, r22
     f30:	8f 83       	std	Y+7, r24	; 0x07
     f32:	98 87       	std	Y+8, r25	; 0x08
     f34:	a9 87       	std	Y+9, r26	; 0x09
     f36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f38:	6f 81       	ldd	r22, Y+7	; 0x07
     f3a:	78 85       	ldd	r23, Y+8	; 0x08
     f3c:	89 85       	ldd	r24, Y+9	; 0x09
     f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	40 e8       	ldi	r20, 0x80	; 128
     f46:	5f e3       	ldi	r21, 0x3F	; 63
     f48:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f4c:	88 23       	and	r24, r24
     f4e:	2c f4       	brge	.+10     	; 0xf5a <main+0x424>
		__ticks = 1;
     f50:	81 e0       	ldi	r24, 0x01	; 1
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	9e 83       	std	Y+6, r25	; 0x06
     f56:	8d 83       	std	Y+5, r24	; 0x05
     f58:	3f c0       	rjmp	.+126    	; 0xfd8 <main+0x4a2>
	else if (__tmp > 65535)
     f5a:	6f 81       	ldd	r22, Y+7	; 0x07
     f5c:	78 85       	ldd	r23, Y+8	; 0x08
     f5e:	89 85       	ldd	r24, Y+9	; 0x09
     f60:	9a 85       	ldd	r25, Y+10	; 0x0a
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	3f ef       	ldi	r19, 0xFF	; 255
     f66:	4f e7       	ldi	r20, 0x7F	; 127
     f68:	57 e4       	ldi	r21, 0x47	; 71
     f6a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f6e:	18 16       	cp	r1, r24
     f70:	4c f5       	brge	.+82     	; 0xfc4 <main+0x48e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f72:	6b 85       	ldd	r22, Y+11	; 0x0b
     f74:	7c 85       	ldd	r23, Y+12	; 0x0c
     f76:	8d 85       	ldd	r24, Y+13	; 0x0d
     f78:	9e 85       	ldd	r25, Y+14	; 0x0e
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	40 e2       	ldi	r20, 0x20	; 32
     f80:	51 e4       	ldi	r21, 0x41	; 65
     f82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	bc 01       	movw	r22, r24
     f8c:	cd 01       	movw	r24, r26
     f8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	9e 83       	std	Y+6, r25	; 0x06
     f98:	8d 83       	std	Y+5, r24	; 0x05
     f9a:	0f c0       	rjmp	.+30     	; 0xfba <main+0x484>
     f9c:	89 e1       	ldi	r24, 0x19	; 25
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	9c 83       	std	Y+4, r25	; 0x04
     fa2:	8b 83       	std	Y+3, r24	; 0x03
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	9c 81       	ldd	r25, Y+4	; 0x04
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <main+0x472>
     fac:	9c 83       	std	Y+4, r25	; 0x04
     fae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb0:	8d 81       	ldd	r24, Y+5	; 0x05
     fb2:	9e 81       	ldd	r25, Y+6	; 0x06
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	9e 83       	std	Y+6, r25	; 0x06
     fb8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fba:	8d 81       	ldd	r24, Y+5	; 0x05
     fbc:	9e 81       	ldd	r25, Y+6	; 0x06
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	69 f7       	brne	.-38     	; 0xf9c <main+0x466>
     fc2:	14 c0       	rjmp	.+40     	; 0xfec <main+0x4b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc4:	6f 81       	ldd	r22, Y+7	; 0x07
     fc6:	78 85       	ldd	r23, Y+8	; 0x08
     fc8:	89 85       	ldd	r24, Y+9	; 0x09
     fca:	9a 85       	ldd	r25, Y+10	; 0x0a
     fcc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fd0:	dc 01       	movw	r26, r24
     fd2:	cb 01       	movw	r24, r22
     fd4:	9e 83       	std	Y+6, r25	; 0x06
     fd6:	8d 83       	std	Y+5, r24	; 0x05
     fd8:	8d 81       	ldd	r24, Y+5	; 0x05
     fda:	9e 81       	ldd	r25, Y+6	; 0x06
     fdc:	9a 83       	std	Y+2, r25	; 0x02
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	89 81       	ldd	r24, Y+1	; 0x01
     fe2:	9a 81       	ldd	r25, Y+2	; 0x02
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	f1 f7       	brne	.-4      	; 0xfe4 <main+0x4ae>
     fe8:	9a 83       	std	Y+2, r25	; 0x02
     fea:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(2000);
				PORTB &= 0xF0;
     fec:	a8 e3       	ldi	r26, 0x38	; 56
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e8 e3       	ldi	r30, 0x38	; 56
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	80 7f       	andi	r24, 0xF0	; 240
     ff8:	8c 93       	st	X, r24
				while(USART_ReceiveByte() != FLAG);
     ffa:	0e 94 38 08 	call	0x1070	; 0x1070 <USART_ReceiveByte>
     ffe:	80 32       	cpi	r24, 0x20	; 32
    1000:	e1 f7       	brne	.-8      	; 0xffa <main+0x4c4>
				USART_SendByte('1');
    1002:	81 e3       	ldi	r24, 0x31	; 49
    1004:	0e 94 21 08 	call	0x1042	; 0x1042 <USART_SendByte>
			}
		}
		flag=0;
    1008:	18 aa       	std	Y+48, r1	; 0x30
    100a:	1f a6       	std	Y+47, r1	; 0x2f
    100c:	f9 cd       	rjmp	.-1038   	; 0xc00 <main+0xca>

0000100e <USART_INIT>:
#define USART_BAUDRATE 9600

#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 8UL)))-1)

void USART_INIT(void)
{
    100e:	df 93       	push	r29
    1010:	cf 93       	push	r28
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
	/* Enable Double speed mode */

	UCSRA = (1<<U2X);
    1016:	eb e2       	ldi	r30, 0x2B	; 43
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	82 e0       	ldi	r24, 0x02	; 2
    101c:	80 83       	st	Z, r24
	 * Disable for UDR empty register interrupt
	 * Enable receiver (RXEN = 1)
	 * Enable Transmitter (TXEN = 1)
	 * RXB8 & TXB8 not used
	 */
	UCSRB = (1<<RXEN) | (1<<TXEN);
    101e:	ea e2       	ldi	r30, 0x2A	; 42
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	88 e1       	ldi	r24, 0x18	; 24
    1024:	80 83       	st	Z, r24
	 * USBS = 0 for 1 stop bit
	 * UCSZ1:0 = 1 (8-bit data length)
	 * UCPOL = 0 (Used with synchronous mode only)
	 */

	UCSRC = (1<<URSEL) | (1<<UCSZ1) | (1<<UCSZ0);
    1026:	e0 e4       	ldi	r30, 0x40	; 64
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	86 e8       	ldi	r24, 0x86	; 134
    102c:	80 83       	st	Z, r24

	/* set value of UBRR reigster with defined baudrate (9600) */

	UBRRH = BAUD_PRESCALE >> 8;
    102e:	e0 e4       	ldi	r30, 0x40	; 64
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    1034:	e9 e2       	ldi	r30, 0x29	; 41
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	8c e0       	ldi	r24, 0x0C	; 12
    103a:	80 83       	st	Z, r24

}
    103c:	cf 91       	pop	r28
    103e:	df 91       	pop	r29
    1040:	08 95       	ret

00001042 <USART_SendByte>:


void USART_SendByte(u8 data)
{
    1042:	df 93       	push	r29
    1044:	cf 93       	push	r28
    1046:	0f 92       	push	r0
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	89 83       	std	Y+1, r24	; 0x01

	while (BIT_IS_CLEAR(UCSRA,UDRE)); // Polling until UDR register is empty and ready to take data
    104e:	eb e2       	ldi	r30, 0x2B	; 43
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	88 2f       	mov	r24, r24
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	80 72       	andi	r24, 0x20	; 32
    105a:	90 70       	andi	r25, 0x00	; 0
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	b9 f3       	breq	.-18     	; 0x104e <USART_SendByte+0xc>

	UDR = data; // set data to UDR register
    1060:	ec e2       	ldi	r30, 0x2C	; 44
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	80 83       	st	Z, r24

	while (BIT_IS_CLEAR(UCSRA,TXC));

	SET_BIT(UCSRA,TXC);*/

}
    1068:	0f 90       	pop	r0
    106a:	cf 91       	pop	r28
    106c:	df 91       	pop	r29
    106e:	08 95       	ret

00001070 <USART_ReceiveByte>:

u8 USART_ReceiveByte(void)
{
    1070:	df 93       	push	r29
    1072:	cf 93       	push	r28
    1074:	cd b7       	in	r28, 0x3d	; 61
    1076:	de b7       	in	r29, 0x3e	; 62
	while (BIT_IS_CLEAR(UCSRA,RXC)); // Polling until UDR register is full with data
    1078:	eb e2       	ldi	r30, 0x2B	; 43
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	88 23       	and	r24, r24
    1080:	dc f7       	brge	.-10     	; 0x1078 <USART_ReceiveByte+0x8>

	return UDR; // return the data from UDR register
    1082:	ec e2       	ldi	r30, 0x2C	; 44
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
}
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <USART_SendString>:

void USART_SendString(const u8 *str)
{
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	00 d0       	rcall	.+0      	; 0x1094 <USART_SendString+0x6>
    1094:	0f 92       	push	r0
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	9b 83       	std	Y+3, r25	; 0x03
    109c:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    109e:	19 82       	std	Y+1, r1	; 0x01
    10a0:	0e c0       	rjmp	.+28     	; 0x10be <USART_SendString+0x30>

	while (str[i] != '\0')
	{
		USART_SendByte(str[i]);
    10a2:	89 81       	ldd	r24, Y+1	; 0x01
    10a4:	28 2f       	mov	r18, r24
    10a6:	30 e0       	ldi	r19, 0x00	; 0
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	9b 81       	ldd	r25, Y+3	; 0x03
    10ac:	fc 01       	movw	r30, r24
    10ae:	e2 0f       	add	r30, r18
    10b0:	f3 1f       	adc	r31, r19
    10b2:	80 81       	ld	r24, Z
    10b4:	0e 94 21 08 	call	0x1042	; 0x1042 <USART_SendByte>
		i++;
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	8f 5f       	subi	r24, 0xFF	; 255
    10bc:	89 83       	std	Y+1, r24	; 0x01

void USART_SendString(const u8 *str)
{
	u8 i = 0;

	while (str[i] != '\0')
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	28 2f       	mov	r18, r24
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	9b 81       	ldd	r25, Y+3	; 0x03
    10c8:	fc 01       	movw	r30, r24
    10ca:	e2 0f       	add	r30, r18
    10cc:	f3 1f       	adc	r31, r19
    10ce:	80 81       	ld	r24, Z
    10d0:	88 23       	and	r24, r24
    10d2:	39 f7       	brne	.-50     	; 0x10a2 <USART_SendString+0x14>
	{
		USART_SendByte(str[i]);
		i++;
	}
}
    10d4:	0f 90       	pop	r0
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	cf 91       	pop	r28
    10dc:	df 91       	pop	r29
    10de:	08 95       	ret

000010e0 <USART_RecieveString>:

void USART_RecieveString(u8 *str)
{
    10e0:	0f 93       	push	r16
    10e2:	1f 93       	push	r17
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <USART_RecieveString+0xa>
    10ea:	0f 92       	push	r0
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
    10f0:	9b 83       	std	Y+3, r25	; 0x03
    10f2:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    10f4:	19 82       	std	Y+1, r1	; 0x01
	str[i] = USART_ReceiveByte();
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	9b 81       	ldd	r25, Y+3	; 0x03
    1100:	8c 01       	movw	r16, r24
    1102:	02 0f       	add	r16, r18
    1104:	13 1f       	adc	r17, r19
    1106:	0e 94 38 08 	call	0x1070	; 0x1070 <USART_ReceiveByte>
    110a:	f8 01       	movw	r30, r16
    110c:	80 83       	st	Z, r24
    110e:	0f c0       	rjmp	.+30     	; 0x112e <USART_RecieveString+0x4e>
	while(str[i] != '#')
	{
		i++;
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	8f 5f       	subi	r24, 0xFF	; 255
    1114:	89 83       	std	Y+1, r24	; 0x01
		str[i] = USART_ReceiveByte();
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	28 2f       	mov	r18, r24
    111a:	30 e0       	ldi	r19, 0x00	; 0
    111c:	8a 81       	ldd	r24, Y+2	; 0x02
    111e:	9b 81       	ldd	r25, Y+3	; 0x03
    1120:	8c 01       	movw	r16, r24
    1122:	02 0f       	add	r16, r18
    1124:	13 1f       	adc	r17, r19
    1126:	0e 94 38 08 	call	0x1070	; 0x1070 <USART_ReceiveByte>
    112a:	f8 01       	movw	r30, r16
    112c:	80 83       	st	Z, r24

void USART_RecieveString(u8 *str)
{
	u8 i = 0;
	str[i] = USART_ReceiveByte();
	while(str[i] != '#')
    112e:	89 81       	ldd	r24, Y+1	; 0x01
    1130:	28 2f       	mov	r18, r24
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	9b 81       	ldd	r25, Y+3	; 0x03
    1138:	fc 01       	movw	r30, r24
    113a:	e2 0f       	add	r30, r18
    113c:	f3 1f       	adc	r31, r19
    113e:	80 81       	ld	r24, Z
    1140:	83 32       	cpi	r24, 0x23	; 35
    1142:	31 f7       	brne	.-52     	; 0x1110 <USART_RecieveString+0x30>
	{
		i++;
		str[i] = USART_ReceiveByte();
	}
	str[i] = '\0';
    1144:	89 81       	ldd	r24, Y+1	; 0x01
    1146:	28 2f       	mov	r18, r24
    1148:	30 e0       	ldi	r19, 0x00	; 0
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	9b 81       	ldd	r25, Y+3	; 0x03
    114e:	fc 01       	movw	r30, r24
    1150:	e2 0f       	add	r30, r18
    1152:	f3 1f       	adc	r31, r19
    1154:	10 82       	st	Z, r1
}
    1156:	0f 90       	pop	r0
    1158:	0f 90       	pop	r0
    115a:	0f 90       	pop	r0
    115c:	cf 91       	pop	r28
    115e:	df 91       	pop	r29
    1160:	1f 91       	pop	r17
    1162:	0f 91       	pop	r16
    1164:	08 95       	ret

00001166 <KeyPad_GetPressKey>:
static int KeyPad_KeyNumber_3_4(u8 Button_Number);



int KeyPad_GetPressKey(u8 col,u8 row)
{
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	00 d0       	rcall	.+0      	; 0x116c <KeyPad_GetPressKey+0x6>
    116c:	00 d0       	rcall	.+0      	; 0x116e <KeyPad_GetPressKey+0x8>
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	89 83       	std	Y+1, r24	; 0x01
    1174:	6a 83       	std	Y+2, r22	; 0x02
	while(1)
	{
		if(col ==4)
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	84 30       	cpi	r24, 0x04	; 4
    117a:	09 f0       	breq	.+2      	; 0x117e <KeyPad_GetPressKey+0x18>
    117c:	53 c0       	rjmp	.+166    	; 0x1224 <KeyPad_GetPressKey+0xbe>
		{
			for(col = 0 ; col < 4 ; col++)
    117e:	19 82       	std	Y+1, r1	; 0x01
    1180:	4c c0       	rjmp	.+152    	; 0x121a <KeyPad_GetPressKey+0xb4>
					{
						KEYPAD_PORT_DIR = (0b00010000<<col);
    1182:	ea e3       	ldi	r30, 0x3A	; 58
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	28 2f       	mov	r18, r24
    118a:	30 e0       	ldi	r19, 0x00	; 0
    118c:	80 e1       	ldi	r24, 0x10	; 16
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	02 c0       	rjmp	.+4      	; 0x1196 <KeyPad_GetPressKey+0x30>
    1192:	88 0f       	add	r24, r24
    1194:	99 1f       	adc	r25, r25
    1196:	2a 95       	dec	r18
    1198:	e2 f7       	brpl	.-8      	; 0x1192 <KeyPad_GetPressKey+0x2c>
    119a:	80 83       	st	Z, r24
						KEYPAD_PORT_OUT = (~(0b00010000<<col));
    119c:	eb e3       	ldi	r30, 0x3B	; 59
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	28 2f       	mov	r18, r24
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	80 e1       	ldi	r24, 0x10	; 16
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	02 2e       	mov	r0, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <KeyPad_GetPressKey+0x4c>
    11ae:	88 0f       	add	r24, r24
    11b0:	99 1f       	adc	r25, r25
    11b2:	0a 94       	dec	r0
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <KeyPad_GetPressKey+0x48>
    11b6:	80 95       	com	r24
    11b8:	80 83       	st	Z, r24

						for(row = 0 ; row < 4 ; row++)
    11ba:	1a 82       	std	Y+2, r1	; 0x02
    11bc:	28 c0       	rjmp	.+80     	; 0x120e <KeyPad_GetPressKey+0xa8>
						{
							if(!(KEYPAD_PORT_IN &(1<<row)))
    11be:	e9 e3       	ldi	r30, 0x39	; 57
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	88 2f       	mov	r24, r24
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	a9 01       	movw	r20, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <KeyPad_GetPressKey+0x70>
    11d2:	55 95       	asr	r21
    11d4:	47 95       	ror	r20
    11d6:	8a 95       	dec	r24
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <KeyPad_GetPressKey+0x6c>
    11da:	ca 01       	movw	r24, r20
    11dc:	81 70       	andi	r24, 0x01	; 1
    11de:	90 70       	andi	r25, 0x00	; 0
    11e0:	00 97       	sbiw	r24, 0x00	; 0
    11e2:	91 f4       	brne	.+36     	; 0x1208 <KeyPad_GetPressKey+0xa2>
							{
								return (KeyPad_KeyNumber_4_4((row*N_COL4)+col+1));
    11e4:	8a 81       	ldd	r24, Y+2	; 0x02
    11e6:	88 2f       	mov	r24, r24
    11e8:	90 e0       	ldi	r25, 0x00	; 0
    11ea:	88 0f       	add	r24, r24
    11ec:	99 1f       	adc	r25, r25
    11ee:	88 0f       	add	r24, r24
    11f0:	99 1f       	adc	r25, r25
    11f2:	98 2f       	mov	r25, r24
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	89 0f       	add	r24, r25
    11f8:	8f 5f       	subi	r24, 0xFF	; 255
    11fa:	0e 94 71 09 	call	0x12e2	; 0x12e2 <KeyPad_KeyNumber_4_4>
    11fe:	28 2f       	mov	r18, r24
    1200:	30 e0       	ldi	r19, 0x00	; 0
    1202:	3c 83       	std	Y+4, r19	; 0x04
    1204:	2b 83       	std	Y+3, r18	; 0x03
    1206:	64 c0       	rjmp	.+200    	; 0x12d0 <KeyPad_GetPressKey+0x16a>
			for(col = 0 ; col < 4 ; col++)
					{
						KEYPAD_PORT_DIR = (0b00010000<<col);
						KEYPAD_PORT_OUT = (~(0b00010000<<col));

						for(row = 0 ; row < 4 ; row++)
    1208:	8a 81       	ldd	r24, Y+2	; 0x02
    120a:	8f 5f       	subi	r24, 0xFF	; 255
    120c:	8a 83       	std	Y+2, r24	; 0x02
    120e:	8a 81       	ldd	r24, Y+2	; 0x02
    1210:	84 30       	cpi	r24, 0x04	; 4
    1212:	a8 f2       	brcs	.-86     	; 0x11be <KeyPad_GetPressKey+0x58>
{
	while(1)
	{
		if(col ==4)
		{
			for(col = 0 ; col < 4 ; col++)
    1214:	89 81       	ldd	r24, Y+1	; 0x01
    1216:	8f 5f       	subi	r24, 0xFF	; 255
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	84 30       	cpi	r24, 0x04	; 4
    121e:	08 f4       	brcc	.+2      	; 0x1222 <KeyPad_GetPressKey+0xbc>
    1220:	b0 cf       	rjmp	.-160    	; 0x1182 <KeyPad_GetPressKey+0x1c>
    1222:	a9 cf       	rjmp	.-174    	; 0x1176 <KeyPad_GetPressKey+0x10>
								return (KeyPad_KeyNumber_4_4((row*N_COL4)+col+1));
							}
						}
					}
		}
		else if(col==3)
    1224:	89 81       	ldd	r24, Y+1	; 0x01
    1226:	83 30       	cpi	r24, 0x03	; 3
    1228:	09 f0       	breq	.+2      	; 0x122c <KeyPad_GetPressKey+0xc6>
    122a:	a5 cf       	rjmp	.-182    	; 0x1176 <KeyPad_GetPressKey+0x10>
		{
			for(col = 0 ; col < 3 ; col++)
    122c:	19 82       	std	Y+1, r1	; 0x01
    122e:	4b c0       	rjmp	.+150    	; 0x12c6 <KeyPad_GetPressKey+0x160>
					{
						KEYPAD_PORT_DIR = (0b00010000<<col);
    1230:	ea e3       	ldi	r30, 0x3A	; 58
    1232:	f0 e0       	ldi	r31, 0x00	; 0
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	28 2f       	mov	r18, r24
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	80 e1       	ldi	r24, 0x10	; 16
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	02 c0       	rjmp	.+4      	; 0x1244 <KeyPad_GetPressKey+0xde>
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	2a 95       	dec	r18
    1246:	e2 f7       	brpl	.-8      	; 0x1240 <KeyPad_GetPressKey+0xda>
    1248:	80 83       	st	Z, r24
						KEYPAD_PORT_OUT = (~(0b00010000<<col));
    124a:	eb e3       	ldi	r30, 0x3B	; 59
    124c:	f0 e0       	ldi	r31, 0x00	; 0
    124e:	89 81       	ldd	r24, Y+1	; 0x01
    1250:	28 2f       	mov	r18, r24
    1252:	30 e0       	ldi	r19, 0x00	; 0
    1254:	80 e1       	ldi	r24, 0x10	; 16
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	02 2e       	mov	r0, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <KeyPad_GetPressKey+0xfa>
    125c:	88 0f       	add	r24, r24
    125e:	99 1f       	adc	r25, r25
    1260:	0a 94       	dec	r0
    1262:	e2 f7       	brpl	.-8      	; 0x125c <KeyPad_GetPressKey+0xf6>
    1264:	80 95       	com	r24
    1266:	80 83       	st	Z, r24

						for(row = 0 ; row < 4 ; row++)
    1268:	1a 82       	std	Y+2, r1	; 0x02
    126a:	27 c0       	rjmp	.+78     	; 0x12ba <KeyPad_GetPressKey+0x154>
						{
							if(!(KEYPAD_PORT_IN &(1<<row)))
    126c:	e9 e3       	ldi	r30, 0x39	; 57
    126e:	f0 e0       	ldi	r31, 0x00	; 0
    1270:	80 81       	ld	r24, Z
    1272:	28 2f       	mov	r18, r24
    1274:	30 e0       	ldi	r19, 0x00	; 0
    1276:	8a 81       	ldd	r24, Y+2	; 0x02
    1278:	88 2f       	mov	r24, r24
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	a9 01       	movw	r20, r18
    127e:	02 c0       	rjmp	.+4      	; 0x1284 <KeyPad_GetPressKey+0x11e>
    1280:	55 95       	asr	r21
    1282:	47 95       	ror	r20
    1284:	8a 95       	dec	r24
    1286:	e2 f7       	brpl	.-8      	; 0x1280 <KeyPad_GetPressKey+0x11a>
    1288:	ca 01       	movw	r24, r20
    128a:	81 70       	andi	r24, 0x01	; 1
    128c:	90 70       	andi	r25, 0x00	; 0
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	89 f4       	brne	.+34     	; 0x12b4 <KeyPad_GetPressKey+0x14e>
							{
								return (KeyPad_KeyNumber_3_4((row*N_COL3)+col+1));
    1292:	8a 81       	ldd	r24, Y+2	; 0x02
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	c9 01       	movw	r24, r18
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	82 0f       	add	r24, r18
    12a0:	93 1f       	adc	r25, r19
    12a2:	98 2f       	mov	r25, r24
    12a4:	89 81       	ldd	r24, Y+1	; 0x01
    12a6:	89 0f       	add	r24, r25
    12a8:	8f 5f       	subi	r24, 0xFF	; 255
    12aa:	0e 94 18 0a 	call	0x1430	; 0x1430 <KeyPad_KeyNumber_3_4>
    12ae:	9c 83       	std	Y+4, r25	; 0x04
    12b0:	8b 83       	std	Y+3, r24	; 0x03
    12b2:	0e c0       	rjmp	.+28     	; 0x12d0 <KeyPad_GetPressKey+0x16a>
			for(col = 0 ; col < 3 ; col++)
					{
						KEYPAD_PORT_DIR = (0b00010000<<col);
						KEYPAD_PORT_OUT = (~(0b00010000<<col));

						for(row = 0 ; row < 4 ; row++)
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	8f 5f       	subi	r24, 0xFF	; 255
    12b8:	8a 83       	std	Y+2, r24	; 0x02
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	84 30       	cpi	r24, 0x04	; 4
    12be:	b0 f2       	brcs	.-84     	; 0x126c <KeyPad_GetPressKey+0x106>
						}
					}
		}
		else if(col==3)
		{
			for(col = 0 ; col < 3 ; col++)
    12c0:	89 81       	ldd	r24, Y+1	; 0x01
    12c2:	8f 5f       	subi	r24, 0xFF	; 255
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	89 81       	ldd	r24, Y+1	; 0x01
    12c8:	83 30       	cpi	r24, 0x03	; 3
    12ca:	08 f4       	brcc	.+2      	; 0x12ce <KeyPad_GetPressKey+0x168>
    12cc:	b1 cf       	rjmp	.-158    	; 0x1230 <KeyPad_GetPressKey+0xca>
    12ce:	53 cf       	rjmp	.-346    	; 0x1176 <KeyPad_GetPressKey+0x10>
						}
					}
		}


	}
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
}
    12d4:	0f 90       	pop	r0
    12d6:	0f 90       	pop	r0
    12d8:	0f 90       	pop	r0
    12da:	0f 90       	pop	r0
    12dc:	cf 91       	pop	r28
    12de:	df 91       	pop	r29
    12e0:	08 95       	ret

000012e2 <KeyPad_KeyNumber_4_4>:

static u8 KeyPad_KeyNumber_4_4(u8 Button_Number)
{
    12e2:	df 93       	push	r29
    12e4:	cf 93       	push	r28
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <KeyPad_KeyNumber_4_4+0x6>
    12e8:	00 d0       	rcall	.+0      	; 0x12ea <KeyPad_KeyNumber_4_4+0x8>
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
    12ee:	89 83       	std	Y+1, r24	; 0x01
	switch(Button_Number)
    12f0:	89 81       	ldd	r24, Y+1	; 0x01
    12f2:	28 2f       	mov	r18, r24
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	3c 83       	std	Y+4, r19	; 0x04
    12f8:	2b 83       	std	Y+3, r18	; 0x03
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	88 30       	cpi	r24, 0x08	; 8
    1300:	91 05       	cpc	r25, r1
    1302:	09 f4       	brne	.+2      	; 0x1306 <KeyPad_KeyNumber_4_4+0x24>
    1304:	70 c0       	rjmp	.+224    	; 0x13e6 <KeyPad_KeyNumber_4_4+0x104>
    1306:	2b 81       	ldd	r18, Y+3	; 0x03
    1308:	3c 81       	ldd	r19, Y+4	; 0x04
    130a:	29 30       	cpi	r18, 0x09	; 9
    130c:	31 05       	cpc	r19, r1
    130e:	5c f5       	brge	.+86     	; 0x1366 <KeyPad_KeyNumber_4_4+0x84>
    1310:	8b 81       	ldd	r24, Y+3	; 0x03
    1312:	9c 81       	ldd	r25, Y+4	; 0x04
    1314:	84 30       	cpi	r24, 0x04	; 4
    1316:	91 05       	cpc	r25, r1
    1318:	09 f4       	brne	.+2      	; 0x131c <KeyPad_KeyNumber_4_4+0x3a>
    131a:	59 c0       	rjmp	.+178    	; 0x13ce <KeyPad_KeyNumber_4_4+0xec>
    131c:	2b 81       	ldd	r18, Y+3	; 0x03
    131e:	3c 81       	ldd	r19, Y+4	; 0x04
    1320:	25 30       	cpi	r18, 0x05	; 5
    1322:	31 05       	cpc	r19, r1
    1324:	9c f4       	brge	.+38     	; 0x134c <KeyPad_KeyNumber_4_4+0x6a>
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	82 30       	cpi	r24, 0x02	; 2
    132c:	91 05       	cpc	r25, r1
    132e:	09 f4       	brne	.+2      	; 0x1332 <KeyPad_KeyNumber_4_4+0x50>
    1330:	48 c0       	rjmp	.+144    	; 0x13c2 <KeyPad_KeyNumber_4_4+0xe0>
    1332:	2b 81       	ldd	r18, Y+3	; 0x03
    1334:	3c 81       	ldd	r19, Y+4	; 0x04
    1336:	23 30       	cpi	r18, 0x03	; 3
    1338:	31 05       	cpc	r19, r1
    133a:	0c f0       	brlt	.+2      	; 0x133e <KeyPad_KeyNumber_4_4+0x5c>
    133c:	45 c0       	rjmp	.+138    	; 0x13c8 <KeyPad_KeyNumber_4_4+0xe6>
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	81 30       	cpi	r24, 0x01	; 1
    1344:	91 05       	cpc	r25, r1
    1346:	09 f4       	brne	.+2      	; 0x134a <KeyPad_KeyNumber_4_4+0x68>
    1348:	39 c0       	rjmp	.+114    	; 0x13bc <KeyPad_KeyNumber_4_4+0xda>
    134a:	68 c0       	rjmp	.+208    	; 0x141c <KeyPad_KeyNumber_4_4+0x13a>
    134c:	2b 81       	ldd	r18, Y+3	; 0x03
    134e:	3c 81       	ldd	r19, Y+4	; 0x04
    1350:	26 30       	cpi	r18, 0x06	; 6
    1352:	31 05       	cpc	r19, r1
    1354:	09 f4       	brne	.+2      	; 0x1358 <KeyPad_KeyNumber_4_4+0x76>
    1356:	41 c0       	rjmp	.+130    	; 0x13da <KeyPad_KeyNumber_4_4+0xf8>
    1358:	8b 81       	ldd	r24, Y+3	; 0x03
    135a:	9c 81       	ldd	r25, Y+4	; 0x04
    135c:	87 30       	cpi	r24, 0x07	; 7
    135e:	91 05       	cpc	r25, r1
    1360:	0c f0       	brlt	.+2      	; 0x1364 <KeyPad_KeyNumber_4_4+0x82>
    1362:	3e c0       	rjmp	.+124    	; 0x13e0 <KeyPad_KeyNumber_4_4+0xfe>
    1364:	37 c0       	rjmp	.+110    	; 0x13d4 <KeyPad_KeyNumber_4_4+0xf2>
    1366:	2b 81       	ldd	r18, Y+3	; 0x03
    1368:	3c 81       	ldd	r19, Y+4	; 0x04
    136a:	2c 30       	cpi	r18, 0x0C	; 12
    136c:	31 05       	cpc	r19, r1
    136e:	09 f4       	brne	.+2      	; 0x1372 <KeyPad_KeyNumber_4_4+0x90>
    1370:	46 c0       	rjmp	.+140    	; 0x13fe <KeyPad_KeyNumber_4_4+0x11c>
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	9c 81       	ldd	r25, Y+4	; 0x04
    1376:	8d 30       	cpi	r24, 0x0D	; 13
    1378:	91 05       	cpc	r25, r1
    137a:	5c f4       	brge	.+22     	; 0x1392 <KeyPad_KeyNumber_4_4+0xb0>
    137c:	2b 81       	ldd	r18, Y+3	; 0x03
    137e:	3c 81       	ldd	r19, Y+4	; 0x04
    1380:	2a 30       	cpi	r18, 0x0A	; 10
    1382:	31 05       	cpc	r19, r1
    1384:	b1 f1       	breq	.+108    	; 0x13f2 <KeyPad_KeyNumber_4_4+0x110>
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	8b 30       	cpi	r24, 0x0B	; 11
    138c:	91 05       	cpc	r25, r1
    138e:	a4 f5       	brge	.+104    	; 0x13f8 <KeyPad_KeyNumber_4_4+0x116>
    1390:	2d c0       	rjmp	.+90     	; 0x13ec <KeyPad_KeyNumber_4_4+0x10a>
    1392:	2b 81       	ldd	r18, Y+3	; 0x03
    1394:	3c 81       	ldd	r19, Y+4	; 0x04
    1396:	2e 30       	cpi	r18, 0x0E	; 14
    1398:	31 05       	cpc	r19, r1
    139a:	b9 f1       	breq	.+110    	; 0x140a <KeyPad_KeyNumber_4_4+0x128>
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	9c 81       	ldd	r25, Y+4	; 0x04
    13a0:	8e 30       	cpi	r24, 0x0E	; 14
    13a2:	91 05       	cpc	r25, r1
    13a4:	7c f1       	brlt	.+94     	; 0x1404 <KeyPad_KeyNumber_4_4+0x122>
    13a6:	2b 81       	ldd	r18, Y+3	; 0x03
    13a8:	3c 81       	ldd	r19, Y+4	; 0x04
    13aa:	2f 30       	cpi	r18, 0x0F	; 15
    13ac:	31 05       	cpc	r19, r1
    13ae:	81 f1       	breq	.+96     	; 0x1410 <KeyPad_KeyNumber_4_4+0x12e>
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	80 31       	cpi	r24, 0x10	; 16
    13b6:	91 05       	cpc	r25, r1
    13b8:	71 f1       	breq	.+92     	; 0x1416 <KeyPad_KeyNumber_4_4+0x134>
    13ba:	30 c0       	rjmp	.+96     	; 0x141c <KeyPad_KeyNumber_4_4+0x13a>
	{
	case 1: return '7';
    13bc:	97 e3       	ldi	r25, 0x37	; 55
    13be:	9a 83       	std	Y+2, r25	; 0x02
    13c0:	2f c0       	rjmp	.+94     	; 0x1420 <KeyPad_KeyNumber_4_4+0x13e>
		break;
	case 2: return '8';
    13c2:	28 e3       	ldi	r18, 0x38	; 56
    13c4:	2a 83       	std	Y+2, r18	; 0x02
    13c6:	2c c0       	rjmp	.+88     	; 0x1420 <KeyPad_KeyNumber_4_4+0x13e>
		break;
	case 3: return '9';
    13c8:	39 e3       	ldi	r19, 0x39	; 57
    13ca:	3a 83       	std	Y+2, r19	; 0x02
    13cc:	29 c0       	rjmp	.+82     	; 0x1420 <KeyPad_KeyNumber_4_4+0x13e>
		break;
	case 4: return '/';
    13ce:	8f e2       	ldi	r24, 0x2F	; 47
    13d0:	8a 83       	std	Y+2, r24	; 0x02
    13d2:	26 c0       	rjmp	.+76     	; 0x1420 <KeyPad_KeyNumber_4_4+0x13e>
		break;
	case 5: return '4';
    13d4:	94 e3       	ldi	r25, 0x34	; 52
    13d6:	9a 83       	std	Y+2, r25	; 0x02
    13d8:	23 c0       	rjmp	.+70     	; 0x1420 <KeyPad_KeyNumber_4_4+0x13e>
		break;
	case 6: return '5';
    13da:	25 e3       	ldi	r18, 0x35	; 53
    13dc:	2a 83       	std	Y+2, r18	; 0x02
    13de:	20 c0       	rjmp	.+64     	; 0x1420 <KeyPad_KeyNumber_4_4+0x13e>
		break;
	case 7: return '6';
    13e0:	36 e3       	ldi	r19, 0x36	; 54
    13e2:	3a 83       	std	Y+2, r19	; 0x02
    13e4:	1d c0       	rjmp	.+58     	; 0x1420 <KeyPad_KeyNumber_4_4+0x13e>
		break;
	case 8: return '*';
    13e6:	8a e2       	ldi	r24, 0x2A	; 42
    13e8:	8a 83       	std	Y+2, r24	; 0x02
    13ea:	1a c0       	rjmp	.+52     	; 0x1420 <KeyPad_KeyNumber_4_4+0x13e>
		break;
	case 9: return '1';
    13ec:	91 e3       	ldi	r25, 0x31	; 49
    13ee:	9a 83       	std	Y+2, r25	; 0x02
    13f0:	17 c0       	rjmp	.+46     	; 0x1420 <KeyPad_KeyNumber_4_4+0x13e>
		break;
	case 10: return '2';
    13f2:	22 e3       	ldi	r18, 0x32	; 50
    13f4:	2a 83       	std	Y+2, r18	; 0x02
    13f6:	14 c0       	rjmp	.+40     	; 0x1420 <KeyPad_KeyNumber_4_4+0x13e>
		break;
	case 11: return '3';
    13f8:	33 e3       	ldi	r19, 0x33	; 51
    13fa:	3a 83       	std	Y+2, r19	; 0x02
    13fc:	11 c0       	rjmp	.+34     	; 0x1420 <KeyPad_KeyNumber_4_4+0x13e>
		break;
	case 12: return '-';
    13fe:	8d e2       	ldi	r24, 0x2D	; 45
    1400:	8a 83       	std	Y+2, r24	; 0x02
    1402:	0e c0       	rjmp	.+28     	; 0x1420 <KeyPad_KeyNumber_4_4+0x13e>
		break;
	case 13: return 'C';
    1404:	93 e4       	ldi	r25, 0x43	; 67
    1406:	9a 83       	std	Y+2, r25	; 0x02
    1408:	0b c0       	rjmp	.+22     	; 0x1420 <KeyPad_KeyNumber_4_4+0x13e>
		break;
	case 14: return '0';
    140a:	20 e3       	ldi	r18, 0x30	; 48
    140c:	2a 83       	std	Y+2, r18	; 0x02
    140e:	08 c0       	rjmp	.+16     	; 0x1420 <KeyPad_KeyNumber_4_4+0x13e>
		break;
	case 15: return '=';
    1410:	3d e3       	ldi	r19, 0x3D	; 61
    1412:	3a 83       	std	Y+2, r19	; 0x02
    1414:	05 c0       	rjmp	.+10     	; 0x1420 <KeyPad_KeyNumber_4_4+0x13e>
		break;
	case 16: return '+';
    1416:	8b e2       	ldi	r24, 0x2B	; 43
    1418:	8a 83       	std	Y+2, r24	; 0x02
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <KeyPad_KeyNumber_4_4+0x13e>
		break;
	default:
		return Button_Number;
    141c:	99 81       	ldd	r25, Y+1	; 0x01
    141e:	9a 83       	std	Y+2, r25	; 0x02
    1420:	8a 81       	ldd	r24, Y+2	; 0x02

	}
}
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <KeyPad_KeyNumber_3_4>:

static int KeyPad_KeyNumber_3_4(u8 Button_Number)
{
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	00 d0       	rcall	.+0      	; 0x1436 <KeyPad_KeyNumber_3_4+0x6>
    1436:	00 d0       	rcall	.+0      	; 0x1438 <KeyPad_KeyNumber_3_4+0x8>
    1438:	0f 92       	push	r0
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
    143e:	89 83       	std	Y+1, r24	; 0x01
	switch(Button_Number)
    1440:	89 81       	ldd	r24, Y+1	; 0x01
    1442:	28 2f       	mov	r18, r24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	3d 83       	std	Y+5, r19	; 0x05
    1448:	2c 83       	std	Y+4, r18	; 0x04
    144a:	8c 81       	ldd	r24, Y+4	; 0x04
    144c:	9d 81       	ldd	r25, Y+5	; 0x05
    144e:	86 30       	cpi	r24, 0x06	; 6
    1450:	91 05       	cpc	r25, r1
    1452:	09 f4       	brne	.+2      	; 0x1456 <KeyPad_KeyNumber_3_4+0x26>
    1454:	69 c0       	rjmp	.+210    	; 0x1528 <KeyPad_KeyNumber_3_4+0xf8>
    1456:	2c 81       	ldd	r18, Y+4	; 0x04
    1458:	3d 81       	ldd	r19, Y+5	; 0x05
    145a:	27 30       	cpi	r18, 0x07	; 7
    145c:	31 05       	cpc	r19, r1
    145e:	24 f5       	brge	.+72     	; 0x14a8 <KeyPad_KeyNumber_3_4+0x78>
    1460:	8c 81       	ldd	r24, Y+4	; 0x04
    1462:	9d 81       	ldd	r25, Y+5	; 0x05
    1464:	83 30       	cpi	r24, 0x03	; 3
    1466:	91 05       	cpc	r25, r1
    1468:	09 f4       	brne	.+2      	; 0x146c <KeyPad_KeyNumber_3_4+0x3c>
    146a:	4f c0       	rjmp	.+158    	; 0x150a <KeyPad_KeyNumber_3_4+0xda>
    146c:	2c 81       	ldd	r18, Y+4	; 0x04
    146e:	3d 81       	ldd	r19, Y+5	; 0x05
    1470:	24 30       	cpi	r18, 0x04	; 4
    1472:	31 05       	cpc	r19, r1
    1474:	64 f4       	brge	.+24     	; 0x148e <KeyPad_KeyNumber_3_4+0x5e>
    1476:	8c 81       	ldd	r24, Y+4	; 0x04
    1478:	9d 81       	ldd	r25, Y+5	; 0x05
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	91 05       	cpc	r25, r1
    147e:	09 f4       	brne	.+2      	; 0x1482 <KeyPad_KeyNumber_3_4+0x52>
    1480:	3a c0       	rjmp	.+116    	; 0x14f6 <KeyPad_KeyNumber_3_4+0xc6>
    1482:	2c 81       	ldd	r18, Y+4	; 0x04
    1484:	3d 81       	ldd	r19, Y+5	; 0x05
    1486:	22 30       	cpi	r18, 0x02	; 2
    1488:	31 05       	cpc	r19, r1
    148a:	d1 f1       	breq	.+116    	; 0x1500 <KeyPad_KeyNumber_3_4+0xd0>
    148c:	6e c0       	rjmp	.+220    	; 0x156a <KeyPad_KeyNumber_3_4+0x13a>
    148e:	8c 81       	ldd	r24, Y+4	; 0x04
    1490:	9d 81       	ldd	r25, Y+5	; 0x05
    1492:	84 30       	cpi	r24, 0x04	; 4
    1494:	91 05       	cpc	r25, r1
    1496:	09 f4       	brne	.+2      	; 0x149a <KeyPad_KeyNumber_3_4+0x6a>
    1498:	3d c0       	rjmp	.+122    	; 0x1514 <KeyPad_KeyNumber_3_4+0xe4>
    149a:	2c 81       	ldd	r18, Y+4	; 0x04
    149c:	3d 81       	ldd	r19, Y+5	; 0x05
    149e:	25 30       	cpi	r18, 0x05	; 5
    14a0:	31 05       	cpc	r19, r1
    14a2:	09 f4       	brne	.+2      	; 0x14a6 <KeyPad_KeyNumber_3_4+0x76>
    14a4:	3c c0       	rjmp	.+120    	; 0x151e <KeyPad_KeyNumber_3_4+0xee>
    14a6:	61 c0       	rjmp	.+194    	; 0x156a <KeyPad_KeyNumber_3_4+0x13a>
    14a8:	8c 81       	ldd	r24, Y+4	; 0x04
    14aa:	9d 81       	ldd	r25, Y+5	; 0x05
    14ac:	89 30       	cpi	r24, 0x09	; 9
    14ae:	91 05       	cpc	r25, r1
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <KeyPad_KeyNumber_3_4+0x84>
    14b2:	49 c0       	rjmp	.+146    	; 0x1546 <KeyPad_KeyNumber_3_4+0x116>
    14b4:	2c 81       	ldd	r18, Y+4	; 0x04
    14b6:	3d 81       	ldd	r19, Y+5	; 0x05
    14b8:	2a 30       	cpi	r18, 0x0A	; 10
    14ba:	31 05       	cpc	r19, r1
    14bc:	5c f4       	brge	.+22     	; 0x14d4 <KeyPad_KeyNumber_3_4+0xa4>
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	9d 81       	ldd	r25, Y+5	; 0x05
    14c2:	87 30       	cpi	r24, 0x07	; 7
    14c4:	91 05       	cpc	r25, r1
    14c6:	a9 f1       	breq	.+106    	; 0x1532 <KeyPad_KeyNumber_3_4+0x102>
    14c8:	2c 81       	ldd	r18, Y+4	; 0x04
    14ca:	3d 81       	ldd	r19, Y+5	; 0x05
    14cc:	28 30       	cpi	r18, 0x08	; 8
    14ce:	31 05       	cpc	r19, r1
    14d0:	a9 f1       	breq	.+106    	; 0x153c <KeyPad_KeyNumber_3_4+0x10c>
    14d2:	4b c0       	rjmp	.+150    	; 0x156a <KeyPad_KeyNumber_3_4+0x13a>
    14d4:	8c 81       	ldd	r24, Y+4	; 0x04
    14d6:	9d 81       	ldd	r25, Y+5	; 0x05
    14d8:	8b 30       	cpi	r24, 0x0B	; 11
    14da:	91 05       	cpc	r25, r1
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <KeyPad_KeyNumber_3_4+0xb0>
    14de:	3d c0       	rjmp	.+122    	; 0x155a <KeyPad_KeyNumber_3_4+0x12a>
    14e0:	2c 81       	ldd	r18, Y+4	; 0x04
    14e2:	3d 81       	ldd	r19, Y+5	; 0x05
    14e4:	2b 30       	cpi	r18, 0x0B	; 11
    14e6:	31 05       	cpc	r19, r1
    14e8:	9c f1       	brlt	.+102    	; 0x1550 <KeyPad_KeyNumber_3_4+0x120>
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
    14ec:	9d 81       	ldd	r25, Y+5	; 0x05
    14ee:	8c 30       	cpi	r24, 0x0C	; 12
    14f0:	91 05       	cpc	r25, r1
    14f2:	b1 f1       	breq	.+108    	; 0x1560 <KeyPad_KeyNumber_3_4+0x130>
    14f4:	3a c0       	rjmp	.+116    	; 0x156a <KeyPad_KeyNumber_3_4+0x13a>
	{
	case 1: return 1;
    14f6:	21 e0       	ldi	r18, 0x01	; 1
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	3b 83       	std	Y+3, r19	; 0x03
    14fc:	2a 83       	std	Y+2, r18	; 0x02
    14fe:	3a c0       	rjmp	.+116    	; 0x1574 <KeyPad_KeyNumber_3_4+0x144>
		break;
	case 2: return 2;
    1500:	82 e0       	ldi	r24, 0x02	; 2
    1502:	90 e0       	ldi	r25, 0x00	; 0
    1504:	9b 83       	std	Y+3, r25	; 0x03
    1506:	8a 83       	std	Y+2, r24	; 0x02
    1508:	35 c0       	rjmp	.+106    	; 0x1574 <KeyPad_KeyNumber_3_4+0x144>
		break;
	case 3: return 3;
    150a:	23 e0       	ldi	r18, 0x03	; 3
    150c:	30 e0       	ldi	r19, 0x00	; 0
    150e:	3b 83       	std	Y+3, r19	; 0x03
    1510:	2a 83       	std	Y+2, r18	; 0x02
    1512:	30 c0       	rjmp	.+96     	; 0x1574 <KeyPad_KeyNumber_3_4+0x144>
		break;
	case 4: return 4;
    1514:	84 e0       	ldi	r24, 0x04	; 4
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	9b 83       	std	Y+3, r25	; 0x03
    151a:	8a 83       	std	Y+2, r24	; 0x02
    151c:	2b c0       	rjmp	.+86     	; 0x1574 <KeyPad_KeyNumber_3_4+0x144>
		break;
	case 5: return 5;
    151e:	25 e0       	ldi	r18, 0x05	; 5
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	3b 83       	std	Y+3, r19	; 0x03
    1524:	2a 83       	std	Y+2, r18	; 0x02
    1526:	26 c0       	rjmp	.+76     	; 0x1574 <KeyPad_KeyNumber_3_4+0x144>
		break;
	case 6: return 6;
    1528:	86 e0       	ldi	r24, 0x06	; 6
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	9b 83       	std	Y+3, r25	; 0x03
    152e:	8a 83       	std	Y+2, r24	; 0x02
    1530:	21 c0       	rjmp	.+66     	; 0x1574 <KeyPad_KeyNumber_3_4+0x144>
		break;
	case 7: return 7;
    1532:	27 e0       	ldi	r18, 0x07	; 7
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	3b 83       	std	Y+3, r19	; 0x03
    1538:	2a 83       	std	Y+2, r18	; 0x02
    153a:	1c c0       	rjmp	.+56     	; 0x1574 <KeyPad_KeyNumber_3_4+0x144>
		break;
	case 8: return 8;
    153c:	88 e0       	ldi	r24, 0x08	; 8
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	9b 83       	std	Y+3, r25	; 0x03
    1542:	8a 83       	std	Y+2, r24	; 0x02
    1544:	17 c0       	rjmp	.+46     	; 0x1574 <KeyPad_KeyNumber_3_4+0x144>
		break;
	case 9: return 9;
    1546:	29 e0       	ldi	r18, 0x09	; 9
    1548:	30 e0       	ldi	r19, 0x00	; 0
    154a:	3b 83       	std	Y+3, r19	; 0x03
    154c:	2a 83       	std	Y+2, r18	; 0x02
    154e:	12 c0       	rjmp	.+36     	; 0x1574 <KeyPad_KeyNumber_3_4+0x144>
		break;
	case 10: return '*';
    1550:	8a e2       	ldi	r24, 0x2A	; 42
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	9b 83       	std	Y+3, r25	; 0x03
    1556:	8a 83       	std	Y+2, r24	; 0x02
    1558:	0d c0       	rjmp	.+26     	; 0x1574 <KeyPad_KeyNumber_3_4+0x144>
		break;
	case 11: return 0;
    155a:	1b 82       	std	Y+3, r1	; 0x03
    155c:	1a 82       	std	Y+2, r1	; 0x02
    155e:	0a c0       	rjmp	.+20     	; 0x1574 <KeyPad_KeyNumber_3_4+0x144>
		break;
	case 12: return '#';
    1560:	23 e2       	ldi	r18, 0x23	; 35
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	3b 83       	std	Y+3, r19	; 0x03
    1566:	2a 83       	std	Y+2, r18	; 0x02
    1568:	05 c0       	rjmp	.+10     	; 0x1574 <KeyPad_KeyNumber_3_4+0x144>
		break;
	default:
		return Button_Number;
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	28 2f       	mov	r18, r24
    156e:	30 e0       	ldi	r19, 0x00	; 0
    1570:	3b 83       	std	Y+3, r19	; 0x03
    1572:	2a 83       	std	Y+2, r18	; 0x02
    1574:	8a 81       	ldd	r24, Y+2	; 0x02
    1576:	9b 81       	ldd	r25, Y+3	; 0x03

	}
}
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <LCD_SendCommand>:
 */
#include "lcd.h"

/**************** Functions Definition **************************/

void LCD_SendCommand(u8 cmd){
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	cd b7       	in	r28, 0x3d	; 61
    158e:	de b7       	in	r29, 0x3e	; 62
    1590:	e9 97       	sbiw	r28, 0x39	; 57
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	de bf       	out	0x3e, r29	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	cd bf       	out	0x3d, r28	; 61
    159c:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS);		//set RS=0 to choose command mode
    159e:	a2 e3       	ldi	r26, 0x32	; 50
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e2 e3       	ldi	r30, 0x32	; 50
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	87 7f       	andi	r24, 0xF7	; 247
    15aa:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);		//set RW=0 to choose write mode
    15ac:	a2 e3       	ldi	r26, 0x32	; 50
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e2 e3       	ldi	r30, 0x32	; 50
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	8f 7e       	andi	r24, 0xEF	; 239
    15b8:	8c 93       	st	X, r24
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	a0 e8       	ldi	r26, 0x80	; 128
    15c0:	bf e3       	ldi	r27, 0x3F	; 63
    15c2:	8d ab       	std	Y+53, r24	; 0x35
    15c4:	9e ab       	std	Y+54, r25	; 0x36
    15c6:	af ab       	std	Y+55, r26	; 0x37
    15c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ca:	6d a9       	ldd	r22, Y+53	; 0x35
    15cc:	7e a9       	ldd	r23, Y+54	; 0x36
    15ce:	8f a9       	ldd	r24, Y+55	; 0x37
    15d0:	98 ad       	ldd	r25, Y+56	; 0x38
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	4a e7       	ldi	r20, 0x7A	; 122
    15d8:	53 e4       	ldi	r21, 0x43	; 67
    15da:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	89 ab       	std	Y+49, r24	; 0x31
    15e4:	9a ab       	std	Y+50, r25	; 0x32
    15e6:	ab ab       	std	Y+51, r26	; 0x33
    15e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15ea:	69 a9       	ldd	r22, Y+49	; 0x31
    15ec:	7a a9       	ldd	r23, Y+50	; 0x32
    15ee:	8b a9       	ldd	r24, Y+51	; 0x33
    15f0:	9c a9       	ldd	r25, Y+52	; 0x34
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e8       	ldi	r20, 0x80	; 128
    15f8:	5f e3       	ldi	r21, 0x3F	; 63
    15fa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    15fe:	88 23       	and	r24, r24
    1600:	2c f4       	brge	.+10     	; 0x160c <LCD_SendCommand+0x84>
		__ticks = 1;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	98 ab       	std	Y+48, r25	; 0x30
    1608:	8f a7       	std	Y+47, r24	; 0x2f
    160a:	3f c0       	rjmp	.+126    	; 0x168a <LCD_SendCommand+0x102>
	else if (__tmp > 65535)
    160c:	69 a9       	ldd	r22, Y+49	; 0x31
    160e:	7a a9       	ldd	r23, Y+50	; 0x32
    1610:	8b a9       	ldd	r24, Y+51	; 0x33
    1612:	9c a9       	ldd	r25, Y+52	; 0x34
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	3f ef       	ldi	r19, 0xFF	; 255
    1618:	4f e7       	ldi	r20, 0x7F	; 127
    161a:	57 e4       	ldi	r21, 0x47	; 71
    161c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1620:	18 16       	cp	r1, r24
    1622:	4c f5       	brge	.+82     	; 0x1676 <LCD_SendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1624:	6d a9       	ldd	r22, Y+53	; 0x35
    1626:	7e a9       	ldd	r23, Y+54	; 0x36
    1628:	8f a9       	ldd	r24, Y+55	; 0x37
    162a:	98 ad       	ldd	r25, Y+56	; 0x38
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	40 e2       	ldi	r20, 0x20	; 32
    1632:	51 e4       	ldi	r21, 0x41	; 65
    1634:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	bc 01       	movw	r22, r24
    163e:	cd 01       	movw	r24, r26
    1640:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	98 ab       	std	Y+48, r25	; 0x30
    164a:	8f a7       	std	Y+47, r24	; 0x2f
    164c:	0f c0       	rjmp	.+30     	; 0x166c <LCD_SendCommand+0xe4>
    164e:	89 e1       	ldi	r24, 0x19	; 25
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	9e a7       	std	Y+46, r25	; 0x2e
    1654:	8d a7       	std	Y+45, r24	; 0x2d
    1656:	8d a5       	ldd	r24, Y+45	; 0x2d
    1658:	9e a5       	ldd	r25, Y+46	; 0x2e
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	f1 f7       	brne	.-4      	; 0x165a <LCD_SendCommand+0xd2>
    165e:	9e a7       	std	Y+46, r25	; 0x2e
    1660:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1662:	8f a5       	ldd	r24, Y+47	; 0x2f
    1664:	98 a9       	ldd	r25, Y+48	; 0x30
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	98 ab       	std	Y+48, r25	; 0x30
    166a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166c:	8f a5       	ldd	r24, Y+47	; 0x2f
    166e:	98 a9       	ldd	r25, Y+48	; 0x30
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	69 f7       	brne	.-38     	; 0x164e <LCD_SendCommand+0xc6>
    1674:	14 c0       	rjmp	.+40     	; 0x169e <LCD_SendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1676:	69 a9       	ldd	r22, Y+49	; 0x31
    1678:	7a a9       	ldd	r23, Y+50	; 0x32
    167a:	8b a9       	ldd	r24, Y+51	; 0x33
    167c:	9c a9       	ldd	r25, Y+52	; 0x34
    167e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	98 ab       	std	Y+48, r25	; 0x30
    1688:	8f a7       	std	Y+47, r24	; 0x2f
    168a:	8f a5       	ldd	r24, Y+47	; 0x2f
    168c:	98 a9       	ldd	r25, Y+48	; 0x30
    168e:	9c a7       	std	Y+44, r25	; 0x2c
    1690:	8b a7       	std	Y+43, r24	; 0x2b
    1692:	8b a5       	ldd	r24, Y+43	; 0x2b
    1694:	9c a5       	ldd	r25, Y+44	; 0x2c
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <LCD_SendCommand+0x10e>
    169a:	9c a7       	std	Y+44, r25	; 0x2c
    169c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);			//set E=1 to enable LCD
    169e:	a2 e3       	ldi	r26, 0x32	; 50
    16a0:	b0 e0       	ldi	r27, 0x00	; 0
    16a2:	e2 e3       	ldi	r30, 0x32	; 50
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	80 81       	ld	r24, Z
    16a8:	84 60       	ori	r24, 0x04	; 4
    16aa:	8c 93       	st	X, r24
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	a0 e8       	ldi	r26, 0x80	; 128
    16b2:	bf e3       	ldi	r27, 0x3F	; 63
    16b4:	8f a3       	std	Y+39, r24	; 0x27
    16b6:	98 a7       	std	Y+40, r25	; 0x28
    16b8:	a9 a7       	std	Y+41, r26	; 0x29
    16ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16bc:	6f a1       	ldd	r22, Y+39	; 0x27
    16be:	78 a5       	ldd	r23, Y+40	; 0x28
    16c0:	89 a5       	ldd	r24, Y+41	; 0x29
    16c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	4a e7       	ldi	r20, 0x7A	; 122
    16ca:	53 e4       	ldi	r21, 0x43	; 67
    16cc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	8b a3       	std	Y+35, r24	; 0x23
    16d6:	9c a3       	std	Y+36, r25	; 0x24
    16d8:	ad a3       	std	Y+37, r26	; 0x25
    16da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16dc:	6b a1       	ldd	r22, Y+35	; 0x23
    16de:	7c a1       	ldd	r23, Y+36	; 0x24
    16e0:	8d a1       	ldd	r24, Y+37	; 0x25
    16e2:	9e a1       	ldd	r25, Y+38	; 0x26
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e8       	ldi	r20, 0x80	; 128
    16ea:	5f e3       	ldi	r21, 0x3F	; 63
    16ec:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16f0:	88 23       	and	r24, r24
    16f2:	2c f4       	brge	.+10     	; 0x16fe <LCD_SendCommand+0x176>
		__ticks = 1;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	9a a3       	std	Y+34, r25	; 0x22
    16fa:	89 a3       	std	Y+33, r24	; 0x21
    16fc:	3f c0       	rjmp	.+126    	; 0x177c <LCD_SendCommand+0x1f4>
	else if (__tmp > 65535)
    16fe:	6b a1       	ldd	r22, Y+35	; 0x23
    1700:	7c a1       	ldd	r23, Y+36	; 0x24
    1702:	8d a1       	ldd	r24, Y+37	; 0x25
    1704:	9e a1       	ldd	r25, Y+38	; 0x26
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	3f ef       	ldi	r19, 0xFF	; 255
    170a:	4f e7       	ldi	r20, 0x7F	; 127
    170c:	57 e4       	ldi	r21, 0x47	; 71
    170e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1712:	18 16       	cp	r1, r24
    1714:	4c f5       	brge	.+82     	; 0x1768 <LCD_SendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1716:	6f a1       	ldd	r22, Y+39	; 0x27
    1718:	78 a5       	ldd	r23, Y+40	; 0x28
    171a:	89 a5       	ldd	r24, Y+41	; 0x29
    171c:	9a a5       	ldd	r25, Y+42	; 0x2a
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e2       	ldi	r20, 0x20	; 32
    1724:	51 e4       	ldi	r21, 0x41	; 65
    1726:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	bc 01       	movw	r22, r24
    1730:	cd 01       	movw	r24, r26
    1732:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	9a a3       	std	Y+34, r25	; 0x22
    173c:	89 a3       	std	Y+33, r24	; 0x21
    173e:	0f c0       	rjmp	.+30     	; 0x175e <LCD_SendCommand+0x1d6>
    1740:	89 e1       	ldi	r24, 0x19	; 25
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	98 a3       	std	Y+32, r25	; 0x20
    1746:	8f 8f       	std	Y+31, r24	; 0x1f
    1748:	8f 8d       	ldd	r24, Y+31	; 0x1f
    174a:	98 a1       	ldd	r25, Y+32	; 0x20
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <LCD_SendCommand+0x1c4>
    1750:	98 a3       	std	Y+32, r25	; 0x20
    1752:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1754:	89 a1       	ldd	r24, Y+33	; 0x21
    1756:	9a a1       	ldd	r25, Y+34	; 0x22
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	9a a3       	std	Y+34, r25	; 0x22
    175c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175e:	89 a1       	ldd	r24, Y+33	; 0x21
    1760:	9a a1       	ldd	r25, Y+34	; 0x22
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	69 f7       	brne	.-38     	; 0x1740 <LCD_SendCommand+0x1b8>
    1766:	14 c0       	rjmp	.+40     	; 0x1790 <LCD_SendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1768:	6b a1       	ldd	r22, Y+35	; 0x23
    176a:	7c a1       	ldd	r23, Y+36	; 0x24
    176c:	8d a1       	ldd	r24, Y+37	; 0x25
    176e:	9e a1       	ldd	r25, Y+38	; 0x26
    1770:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	9a a3       	std	Y+34, r25	; 0x22
    177a:	89 a3       	std	Y+33, r24	; 0x21
    177c:	89 a1       	ldd	r24, Y+33	; 0x21
    177e:	9a a1       	ldd	r25, Y+34	; 0x22
    1780:	9e 8f       	std	Y+30, r25	; 0x1e
    1782:	8d 8f       	std	Y+29, r24	; 0x1d
    1784:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1786:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	f1 f7       	brne	.-4      	; 0x1788 <LCD_SendCommand+0x200>
    178c:	9e 8f       	std	Y+30, r25	; 0x1e
    178e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT = cmd;				//send command through data pins
    1790:	e5 e3       	ldi	r30, 0x35	; 53
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	89 ad       	ldd	r24, Y+57	; 0x39
    1796:	80 83       	st	Z, r24
    1798:	80 e0       	ldi	r24, 0x00	; 0
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	a0 e8       	ldi	r26, 0x80	; 128
    179e:	bf e3       	ldi	r27, 0x3F	; 63
    17a0:	89 8f       	std	Y+25, r24	; 0x19
    17a2:	9a 8f       	std	Y+26, r25	; 0x1a
    17a4:	ab 8f       	std	Y+27, r26	; 0x1b
    17a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a8:	69 8d       	ldd	r22, Y+25	; 0x19
    17aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17b0:	20 e0       	ldi	r18, 0x00	; 0
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	4a e7       	ldi	r20, 0x7A	; 122
    17b6:	53 e4       	ldi	r21, 0x43	; 67
    17b8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17bc:	dc 01       	movw	r26, r24
    17be:	cb 01       	movw	r24, r22
    17c0:	8d 8b       	std	Y+21, r24	; 0x15
    17c2:	9e 8b       	std	Y+22, r25	; 0x16
    17c4:	af 8b       	std	Y+23, r26	; 0x17
    17c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17c8:	6d 89       	ldd	r22, Y+21	; 0x15
    17ca:	7e 89       	ldd	r23, Y+22	; 0x16
    17cc:	8f 89       	ldd	r24, Y+23	; 0x17
    17ce:	98 8d       	ldd	r25, Y+24	; 0x18
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	40 e8       	ldi	r20, 0x80	; 128
    17d6:	5f e3       	ldi	r21, 0x3F	; 63
    17d8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17dc:	88 23       	and	r24, r24
    17de:	2c f4       	brge	.+10     	; 0x17ea <LCD_SendCommand+0x262>
		__ticks = 1;
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	9c 8b       	std	Y+20, r25	; 0x14
    17e6:	8b 8b       	std	Y+19, r24	; 0x13
    17e8:	3f c0       	rjmp	.+126    	; 0x1868 <LCD_SendCommand+0x2e0>
	else if (__tmp > 65535)
    17ea:	6d 89       	ldd	r22, Y+21	; 0x15
    17ec:	7e 89       	ldd	r23, Y+22	; 0x16
    17ee:	8f 89       	ldd	r24, Y+23	; 0x17
    17f0:	98 8d       	ldd	r25, Y+24	; 0x18
    17f2:	20 e0       	ldi	r18, 0x00	; 0
    17f4:	3f ef       	ldi	r19, 0xFF	; 255
    17f6:	4f e7       	ldi	r20, 0x7F	; 127
    17f8:	57 e4       	ldi	r21, 0x47	; 71
    17fa:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17fe:	18 16       	cp	r1, r24
    1800:	4c f5       	brge	.+82     	; 0x1854 <LCD_SendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1802:	69 8d       	ldd	r22, Y+25	; 0x19
    1804:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1806:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1808:	9c 8d       	ldd	r25, Y+28	; 0x1c
    180a:	20 e0       	ldi	r18, 0x00	; 0
    180c:	30 e0       	ldi	r19, 0x00	; 0
    180e:	40 e2       	ldi	r20, 0x20	; 32
    1810:	51 e4       	ldi	r21, 0x41	; 65
    1812:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1816:	dc 01       	movw	r26, r24
    1818:	cb 01       	movw	r24, r22
    181a:	bc 01       	movw	r22, r24
    181c:	cd 01       	movw	r24, r26
    181e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1822:	dc 01       	movw	r26, r24
    1824:	cb 01       	movw	r24, r22
    1826:	9c 8b       	std	Y+20, r25	; 0x14
    1828:	8b 8b       	std	Y+19, r24	; 0x13
    182a:	0f c0       	rjmp	.+30     	; 0x184a <LCD_SendCommand+0x2c2>
    182c:	89 e1       	ldi	r24, 0x19	; 25
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	9a 8b       	std	Y+18, r25	; 0x12
    1832:	89 8b       	std	Y+17, r24	; 0x11
    1834:	89 89       	ldd	r24, Y+17	; 0x11
    1836:	9a 89       	ldd	r25, Y+18	; 0x12
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	f1 f7       	brne	.-4      	; 0x1838 <LCD_SendCommand+0x2b0>
    183c:	9a 8b       	std	Y+18, r25	; 0x12
    183e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1840:	8b 89       	ldd	r24, Y+19	; 0x13
    1842:	9c 89       	ldd	r25, Y+20	; 0x14
    1844:	01 97       	sbiw	r24, 0x01	; 1
    1846:	9c 8b       	std	Y+20, r25	; 0x14
    1848:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    184a:	8b 89       	ldd	r24, Y+19	; 0x13
    184c:	9c 89       	ldd	r25, Y+20	; 0x14
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	69 f7       	brne	.-38     	; 0x182c <LCD_SendCommand+0x2a4>
    1852:	14 c0       	rjmp	.+40     	; 0x187c <LCD_SendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1854:	6d 89       	ldd	r22, Y+21	; 0x15
    1856:	7e 89       	ldd	r23, Y+22	; 0x16
    1858:	8f 89       	ldd	r24, Y+23	; 0x17
    185a:	98 8d       	ldd	r25, Y+24	; 0x18
    185c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1860:	dc 01       	movw	r26, r24
    1862:	cb 01       	movw	r24, r22
    1864:	9c 8b       	std	Y+20, r25	; 0x14
    1866:	8b 8b       	std	Y+19, r24	; 0x13
    1868:	8b 89       	ldd	r24, Y+19	; 0x13
    186a:	9c 89       	ldd	r25, Y+20	; 0x14
    186c:	98 8b       	std	Y+16, r25	; 0x10
    186e:	8f 87       	std	Y+15, r24	; 0x0f
    1870:	8f 85       	ldd	r24, Y+15	; 0x0f
    1872:	98 89       	ldd	r25, Y+16	; 0x10
    1874:	01 97       	sbiw	r24, 0x01	; 1
    1876:	f1 f7       	brne	.-4      	; 0x1874 <LCD_SendCommand+0x2ec>
    1878:	98 8b       	std	Y+16, r25	; 0x10
    187a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);			//set E=0 to disable LCD
    187c:	a2 e3       	ldi	r26, 0x32	; 50
    187e:	b0 e0       	ldi	r27, 0x00	; 0
    1880:	e2 e3       	ldi	r30, 0x32	; 50
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	8b 7f       	andi	r24, 0xFB	; 251
    1888:	8c 93       	st	X, r24
    188a:	80 e0       	ldi	r24, 0x00	; 0
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	a0 e8       	ldi	r26, 0x80	; 128
    1890:	bf e3       	ldi	r27, 0x3F	; 63
    1892:	8b 87       	std	Y+11, r24	; 0x0b
    1894:	9c 87       	std	Y+12, r25	; 0x0c
    1896:	ad 87       	std	Y+13, r26	; 0x0d
    1898:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    189a:	6b 85       	ldd	r22, Y+11	; 0x0b
    189c:	7c 85       	ldd	r23, Y+12	; 0x0c
    189e:	8d 85       	ldd	r24, Y+13	; 0x0d
    18a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    18a2:	20 e0       	ldi	r18, 0x00	; 0
    18a4:	30 e0       	ldi	r19, 0x00	; 0
    18a6:	4a e7       	ldi	r20, 0x7A	; 122
    18a8:	53 e4       	ldi	r21, 0x43	; 67
    18aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    18ae:	dc 01       	movw	r26, r24
    18b0:	cb 01       	movw	r24, r22
    18b2:	8f 83       	std	Y+7, r24	; 0x07
    18b4:	98 87       	std	Y+8, r25	; 0x08
    18b6:	a9 87       	std	Y+9, r26	; 0x09
    18b8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18ba:	6f 81       	ldd	r22, Y+7	; 0x07
    18bc:	78 85       	ldd	r23, Y+8	; 0x08
    18be:	89 85       	ldd	r24, Y+9	; 0x09
    18c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	30 e0       	ldi	r19, 0x00	; 0
    18c6:	40 e8       	ldi	r20, 0x80	; 128
    18c8:	5f e3       	ldi	r21, 0x3F	; 63
    18ca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    18ce:	88 23       	and	r24, r24
    18d0:	2c f4       	brge	.+10     	; 0x18dc <LCD_SendCommand+0x354>
		__ticks = 1;
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	9e 83       	std	Y+6, r25	; 0x06
    18d8:	8d 83       	std	Y+5, r24	; 0x05
    18da:	3f c0       	rjmp	.+126    	; 0x195a <LCD_SendCommand+0x3d2>
	else if (__tmp > 65535)
    18dc:	6f 81       	ldd	r22, Y+7	; 0x07
    18de:	78 85       	ldd	r23, Y+8	; 0x08
    18e0:	89 85       	ldd	r24, Y+9	; 0x09
    18e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18e4:	20 e0       	ldi	r18, 0x00	; 0
    18e6:	3f ef       	ldi	r19, 0xFF	; 255
    18e8:	4f e7       	ldi	r20, 0x7F	; 127
    18ea:	57 e4       	ldi	r21, 0x47	; 71
    18ec:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    18f0:	18 16       	cp	r1, r24
    18f2:	4c f5       	brge	.+82     	; 0x1946 <LCD_SendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e2       	ldi	r20, 0x20	; 32
    1902:	51 e4       	ldi	r21, 0x41	; 65
    1904:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1908:	dc 01       	movw	r26, r24
    190a:	cb 01       	movw	r24, r22
    190c:	bc 01       	movw	r22, r24
    190e:	cd 01       	movw	r24, r26
    1910:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1914:	dc 01       	movw	r26, r24
    1916:	cb 01       	movw	r24, r22
    1918:	9e 83       	std	Y+6, r25	; 0x06
    191a:	8d 83       	std	Y+5, r24	; 0x05
    191c:	0f c0       	rjmp	.+30     	; 0x193c <LCD_SendCommand+0x3b4>
    191e:	89 e1       	ldi	r24, 0x19	; 25
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	9c 83       	std	Y+4, r25	; 0x04
    1924:	8b 83       	std	Y+3, r24	; 0x03
    1926:	8b 81       	ldd	r24, Y+3	; 0x03
    1928:	9c 81       	ldd	r25, Y+4	; 0x04
    192a:	01 97       	sbiw	r24, 0x01	; 1
    192c:	f1 f7       	brne	.-4      	; 0x192a <LCD_SendCommand+0x3a2>
    192e:	9c 83       	std	Y+4, r25	; 0x04
    1930:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1932:	8d 81       	ldd	r24, Y+5	; 0x05
    1934:	9e 81       	ldd	r25, Y+6	; 0x06
    1936:	01 97       	sbiw	r24, 0x01	; 1
    1938:	9e 83       	std	Y+6, r25	; 0x06
    193a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    193c:	8d 81       	ldd	r24, Y+5	; 0x05
    193e:	9e 81       	ldd	r25, Y+6	; 0x06
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	69 f7       	brne	.-38     	; 0x191e <LCD_SendCommand+0x396>
    1944:	14 c0       	rjmp	.+40     	; 0x196e <LCD_SendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1946:	6f 81       	ldd	r22, Y+7	; 0x07
    1948:	78 85       	ldd	r23, Y+8	; 0x08
    194a:	89 85       	ldd	r24, Y+9	; 0x09
    194c:	9a 85       	ldd	r25, Y+10	; 0x0a
    194e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1952:	dc 01       	movw	r26, r24
    1954:	cb 01       	movw	r24, r22
    1956:	9e 83       	std	Y+6, r25	; 0x06
    1958:	8d 83       	std	Y+5, r24	; 0x05
    195a:	8d 81       	ldd	r24, Y+5	; 0x05
    195c:	9e 81       	ldd	r25, Y+6	; 0x06
    195e:	9a 83       	std	Y+2, r25	; 0x02
    1960:	89 83       	std	Y+1, r24	; 0x01
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	9a 81       	ldd	r25, Y+2	; 0x02
    1966:	01 97       	sbiw	r24, 0x01	; 1
    1968:	f1 f7       	brne	.-4      	; 0x1966 <LCD_SendCommand+0x3de>
    196a:	9a 83       	std	Y+2, r25	; 0x02
    196c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    196e:	e9 96       	adiw	r28, 0x39	; 57
    1970:	0f b6       	in	r0, 0x3f	; 63
    1972:	f8 94       	cli
    1974:	de bf       	out	0x3e, r29	; 62
    1976:	0f be       	out	0x3f, r0	; 63
    1978:	cd bf       	out	0x3d, r28	; 61
    197a:	cf 91       	pop	r28
    197c:	df 91       	pop	r29
    197e:	08 95       	ret

00001980 <LCD_DisplayCharacter>:

void LCD_DisplayCharacter(u8 data){
    1980:	df 93       	push	r29
    1982:	cf 93       	push	r28
    1984:	cd b7       	in	r28, 0x3d	; 61
    1986:	de b7       	in	r29, 0x3e	; 62
    1988:	e9 97       	sbiw	r28, 0x39	; 57
    198a:	0f b6       	in	r0, 0x3f	; 63
    198c:	f8 94       	cli
    198e:	de bf       	out	0x3e, r29	; 62
    1990:	0f be       	out	0x3f, r0	; 63
    1992:	cd bf       	out	0x3d, r28	; 61
    1994:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS);			//set RS=1 to choose Data mode
    1996:	a2 e3       	ldi	r26, 0x32	; 50
    1998:	b0 e0       	ldi	r27, 0x00	; 0
    199a:	e2 e3       	ldi	r30, 0x32	; 50
    199c:	f0 e0       	ldi	r31, 0x00	; 0
    199e:	80 81       	ld	r24, Z
    19a0:	88 60       	ori	r24, 0x08	; 8
    19a2:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW);		//set RW=0 to choose write mode
    19a4:	a2 e3       	ldi	r26, 0x32	; 50
    19a6:	b0 e0       	ldi	r27, 0x00	; 0
    19a8:	e2 e3       	ldi	r30, 0x32	; 50
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	80 81       	ld	r24, Z
    19ae:	8f 7e       	andi	r24, 0xEF	; 239
    19b0:	8c 93       	st	X, r24
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	a0 e8       	ldi	r26, 0x80	; 128
    19b8:	bf e3       	ldi	r27, 0x3F	; 63
    19ba:	8d ab       	std	Y+53, r24	; 0x35
    19bc:	9e ab       	std	Y+54, r25	; 0x36
    19be:	af ab       	std	Y+55, r26	; 0x37
    19c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c2:	6d a9       	ldd	r22, Y+53	; 0x35
    19c4:	7e a9       	ldd	r23, Y+54	; 0x36
    19c6:	8f a9       	ldd	r24, Y+55	; 0x37
    19c8:	98 ad       	ldd	r25, Y+56	; 0x38
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	4a e7       	ldi	r20, 0x7A	; 122
    19d0:	53 e4       	ldi	r21, 0x43	; 67
    19d2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19d6:	dc 01       	movw	r26, r24
    19d8:	cb 01       	movw	r24, r22
    19da:	89 ab       	std	Y+49, r24	; 0x31
    19dc:	9a ab       	std	Y+50, r25	; 0x32
    19de:	ab ab       	std	Y+51, r26	; 0x33
    19e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19e2:	69 a9       	ldd	r22, Y+49	; 0x31
    19e4:	7a a9       	ldd	r23, Y+50	; 0x32
    19e6:	8b a9       	ldd	r24, Y+51	; 0x33
    19e8:	9c a9       	ldd	r25, Y+52	; 0x34
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	40 e8       	ldi	r20, 0x80	; 128
    19f0:	5f e3       	ldi	r21, 0x3F	; 63
    19f2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19f6:	88 23       	and	r24, r24
    19f8:	2c f4       	brge	.+10     	; 0x1a04 <LCD_DisplayCharacter+0x84>
		__ticks = 1;
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	98 ab       	std	Y+48, r25	; 0x30
    1a00:	8f a7       	std	Y+47, r24	; 0x2f
    1a02:	3f c0       	rjmp	.+126    	; 0x1a82 <LCD_DisplayCharacter+0x102>
	else if (__tmp > 65535)
    1a04:	69 a9       	ldd	r22, Y+49	; 0x31
    1a06:	7a a9       	ldd	r23, Y+50	; 0x32
    1a08:	8b a9       	ldd	r24, Y+51	; 0x33
    1a0a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a0c:	20 e0       	ldi	r18, 0x00	; 0
    1a0e:	3f ef       	ldi	r19, 0xFF	; 255
    1a10:	4f e7       	ldi	r20, 0x7F	; 127
    1a12:	57 e4       	ldi	r21, 0x47	; 71
    1a14:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1a18:	18 16       	cp	r1, r24
    1a1a:	4c f5       	brge	.+82     	; 0x1a6e <LCD_DisplayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a1e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a20:	8f a9       	ldd	r24, Y+55	; 0x37
    1a22:	98 ad       	ldd	r25, Y+56	; 0x38
    1a24:	20 e0       	ldi	r18, 0x00	; 0
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	40 e2       	ldi	r20, 0x20	; 32
    1a2a:	51 e4       	ldi	r21, 0x41	; 65
    1a2c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a30:	dc 01       	movw	r26, r24
    1a32:	cb 01       	movw	r24, r22
    1a34:	bc 01       	movw	r22, r24
    1a36:	cd 01       	movw	r24, r26
    1a38:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	98 ab       	std	Y+48, r25	; 0x30
    1a42:	8f a7       	std	Y+47, r24	; 0x2f
    1a44:	0f c0       	rjmp	.+30     	; 0x1a64 <LCD_DisplayCharacter+0xe4>
    1a46:	89 e1       	ldi	r24, 0x19	; 25
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	9e a7       	std	Y+46, r25	; 0x2e
    1a4c:	8d a7       	std	Y+45, r24	; 0x2d
    1a4e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a50:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <LCD_DisplayCharacter+0xd2>
    1a56:	9e a7       	std	Y+46, r25	; 0x2e
    1a58:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a5c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a5e:	01 97       	sbiw	r24, 0x01	; 1
    1a60:	98 ab       	std	Y+48, r25	; 0x30
    1a62:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a66:	98 a9       	ldd	r25, Y+48	; 0x30
    1a68:	00 97       	sbiw	r24, 0x00	; 0
    1a6a:	69 f7       	brne	.-38     	; 0x1a46 <LCD_DisplayCharacter+0xc6>
    1a6c:	14 c0       	rjmp	.+40     	; 0x1a96 <LCD_DisplayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a6e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a70:	7a a9       	ldd	r23, Y+50	; 0x32
    1a72:	8b a9       	ldd	r24, Y+51	; 0x33
    1a74:	9c a9       	ldd	r25, Y+52	; 0x34
    1a76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a7a:	dc 01       	movw	r26, r24
    1a7c:	cb 01       	movw	r24, r22
    1a7e:	98 ab       	std	Y+48, r25	; 0x30
    1a80:	8f a7       	std	Y+47, r24	; 0x2f
    1a82:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a84:	98 a9       	ldd	r25, Y+48	; 0x30
    1a86:	9c a7       	std	Y+44, r25	; 0x2c
    1a88:	8b a7       	std	Y+43, r24	; 0x2b
    1a8a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a8c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	f1 f7       	brne	.-4      	; 0x1a8e <LCD_DisplayCharacter+0x10e>
    1a92:	9c a7       	std	Y+44, r25	; 0x2c
    1a94:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	SET_BIT(LCD_CTRL_PORT,E);			//set E=1 to enable LCD
    1a96:	a2 e3       	ldi	r26, 0x32	; 50
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	e2 e3       	ldi	r30, 0x32	; 50
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	84 60       	ori	r24, 0x04	; 4
    1aa2:	8c 93       	st	X, r24
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	a0 e8       	ldi	r26, 0x80	; 128
    1aaa:	bf e3       	ldi	r27, 0x3F	; 63
    1aac:	8f a3       	std	Y+39, r24	; 0x27
    1aae:	98 a7       	std	Y+40, r25	; 0x28
    1ab0:	a9 a7       	std	Y+41, r26	; 0x29
    1ab2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ab4:	6f a1       	ldd	r22, Y+39	; 0x27
    1ab6:	78 a5       	ldd	r23, Y+40	; 0x28
    1ab8:	89 a5       	ldd	r24, Y+41	; 0x29
    1aba:	9a a5       	ldd	r25, Y+42	; 0x2a
    1abc:	20 e0       	ldi	r18, 0x00	; 0
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	4a e7       	ldi	r20, 0x7A	; 122
    1ac2:	53 e4       	ldi	r21, 0x43	; 67
    1ac4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ac8:	dc 01       	movw	r26, r24
    1aca:	cb 01       	movw	r24, r22
    1acc:	8b a3       	std	Y+35, r24	; 0x23
    1ace:	9c a3       	std	Y+36, r25	; 0x24
    1ad0:	ad a3       	std	Y+37, r26	; 0x25
    1ad2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ad4:	6b a1       	ldd	r22, Y+35	; 0x23
    1ad6:	7c a1       	ldd	r23, Y+36	; 0x24
    1ad8:	8d a1       	ldd	r24, Y+37	; 0x25
    1ada:	9e a1       	ldd	r25, Y+38	; 0x26
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	40 e8       	ldi	r20, 0x80	; 128
    1ae2:	5f e3       	ldi	r21, 0x3F	; 63
    1ae4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1ae8:	88 23       	and	r24, r24
    1aea:	2c f4       	brge	.+10     	; 0x1af6 <LCD_DisplayCharacter+0x176>
		__ticks = 1;
    1aec:	81 e0       	ldi	r24, 0x01	; 1
    1aee:	90 e0       	ldi	r25, 0x00	; 0
    1af0:	9a a3       	std	Y+34, r25	; 0x22
    1af2:	89 a3       	std	Y+33, r24	; 0x21
    1af4:	3f c0       	rjmp	.+126    	; 0x1b74 <LCD_DisplayCharacter+0x1f4>
	else if (__tmp > 65535)
    1af6:	6b a1       	ldd	r22, Y+35	; 0x23
    1af8:	7c a1       	ldd	r23, Y+36	; 0x24
    1afa:	8d a1       	ldd	r24, Y+37	; 0x25
    1afc:	9e a1       	ldd	r25, Y+38	; 0x26
    1afe:	20 e0       	ldi	r18, 0x00	; 0
    1b00:	3f ef       	ldi	r19, 0xFF	; 255
    1b02:	4f e7       	ldi	r20, 0x7F	; 127
    1b04:	57 e4       	ldi	r21, 0x47	; 71
    1b06:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b0a:	18 16       	cp	r1, r24
    1b0c:	4c f5       	brge	.+82     	; 0x1b60 <LCD_DisplayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b0e:	6f a1       	ldd	r22, Y+39	; 0x27
    1b10:	78 a5       	ldd	r23, Y+40	; 0x28
    1b12:	89 a5       	ldd	r24, Y+41	; 0x29
    1b14:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e2       	ldi	r20, 0x20	; 32
    1b1c:	51 e4       	ldi	r21, 0x41	; 65
    1b1e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	bc 01       	movw	r22, r24
    1b28:	cd 01       	movw	r24, r26
    1b2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9a a3       	std	Y+34, r25	; 0x22
    1b34:	89 a3       	std	Y+33, r24	; 0x21
    1b36:	0f c0       	rjmp	.+30     	; 0x1b56 <LCD_DisplayCharacter+0x1d6>
    1b38:	89 e1       	ldi	r24, 0x19	; 25
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	98 a3       	std	Y+32, r25	; 0x20
    1b3e:	8f 8f       	std	Y+31, r24	; 0x1f
    1b40:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b42:	98 a1       	ldd	r25, Y+32	; 0x20
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <LCD_DisplayCharacter+0x1c4>
    1b48:	98 a3       	std	Y+32, r25	; 0x20
    1b4a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b4e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	9a a3       	std	Y+34, r25	; 0x22
    1b54:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b56:	89 a1       	ldd	r24, Y+33	; 0x21
    1b58:	9a a1       	ldd	r25, Y+34	; 0x22
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	69 f7       	brne	.-38     	; 0x1b38 <LCD_DisplayCharacter+0x1b8>
    1b5e:	14 c0       	rjmp	.+40     	; 0x1b88 <LCD_DisplayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b60:	6b a1       	ldd	r22, Y+35	; 0x23
    1b62:	7c a1       	ldd	r23, Y+36	; 0x24
    1b64:	8d a1       	ldd	r24, Y+37	; 0x25
    1b66:	9e a1       	ldd	r25, Y+38	; 0x26
    1b68:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	9a a3       	std	Y+34, r25	; 0x22
    1b72:	89 a3       	std	Y+33, r24	; 0x21
    1b74:	89 a1       	ldd	r24, Y+33	; 0x21
    1b76:	9a a1       	ldd	r25, Y+34	; 0x22
    1b78:	9e 8f       	std	Y+30, r25	; 0x1e
    1b7a:	8d 8f       	std	Y+29, r24	; 0x1d
    1b7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b7e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b80:	01 97       	sbiw	r24, 0x01	; 1
    1b82:	f1 f7       	brne	.-4      	; 0x1b80 <LCD_DisplayCharacter+0x200>
    1b84:	9e 8f       	std	Y+30, r25	; 0x1e
    1b86:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_DATA_PORT = data;				//send data through data pins
    1b88:	e5 e3       	ldi	r30, 0x35	; 53
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	89 ad       	ldd	r24, Y+57	; 0x39
    1b8e:	80 83       	st	Z, r24
    1b90:	80 e0       	ldi	r24, 0x00	; 0
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	a0 e8       	ldi	r26, 0x80	; 128
    1b96:	bf e3       	ldi	r27, 0x3F	; 63
    1b98:	89 8f       	std	Y+25, r24	; 0x19
    1b9a:	9a 8f       	std	Y+26, r25	; 0x1a
    1b9c:	ab 8f       	std	Y+27, r26	; 0x1b
    1b9e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba0:	69 8d       	ldd	r22, Y+25	; 0x19
    1ba2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ba4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ba6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	4a e7       	ldi	r20, 0x7A	; 122
    1bae:	53 e4       	ldi	r21, 0x43	; 67
    1bb0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bb4:	dc 01       	movw	r26, r24
    1bb6:	cb 01       	movw	r24, r22
    1bb8:	8d 8b       	std	Y+21, r24	; 0x15
    1bba:	9e 8b       	std	Y+22, r25	; 0x16
    1bbc:	af 8b       	std	Y+23, r26	; 0x17
    1bbe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bc0:	6d 89       	ldd	r22, Y+21	; 0x15
    1bc2:	7e 89       	ldd	r23, Y+22	; 0x16
    1bc4:	8f 89       	ldd	r24, Y+23	; 0x17
    1bc6:	98 8d       	ldd	r25, Y+24	; 0x18
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	30 e0       	ldi	r19, 0x00	; 0
    1bcc:	40 e8       	ldi	r20, 0x80	; 128
    1bce:	5f e3       	ldi	r21, 0x3F	; 63
    1bd0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1bd4:	88 23       	and	r24, r24
    1bd6:	2c f4       	brge	.+10     	; 0x1be2 <LCD_DisplayCharacter+0x262>
		__ticks = 1;
    1bd8:	81 e0       	ldi	r24, 0x01	; 1
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	9c 8b       	std	Y+20, r25	; 0x14
    1bde:	8b 8b       	std	Y+19, r24	; 0x13
    1be0:	3f c0       	rjmp	.+126    	; 0x1c60 <LCD_DisplayCharacter+0x2e0>
	else if (__tmp > 65535)
    1be2:	6d 89       	ldd	r22, Y+21	; 0x15
    1be4:	7e 89       	ldd	r23, Y+22	; 0x16
    1be6:	8f 89       	ldd	r24, Y+23	; 0x17
    1be8:	98 8d       	ldd	r25, Y+24	; 0x18
    1bea:	20 e0       	ldi	r18, 0x00	; 0
    1bec:	3f ef       	ldi	r19, 0xFF	; 255
    1bee:	4f e7       	ldi	r20, 0x7F	; 127
    1bf0:	57 e4       	ldi	r21, 0x47	; 71
    1bf2:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1bf6:	18 16       	cp	r1, r24
    1bf8:	4c f5       	brge	.+82     	; 0x1c4c <LCD_DisplayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bfa:	69 8d       	ldd	r22, Y+25	; 0x19
    1bfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c02:	20 e0       	ldi	r18, 0x00	; 0
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	40 e2       	ldi	r20, 0x20	; 32
    1c08:	51 e4       	ldi	r21, 0x41	; 65
    1c0a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c0e:	dc 01       	movw	r26, r24
    1c10:	cb 01       	movw	r24, r22
    1c12:	bc 01       	movw	r22, r24
    1c14:	cd 01       	movw	r24, r26
    1c16:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c1a:	dc 01       	movw	r26, r24
    1c1c:	cb 01       	movw	r24, r22
    1c1e:	9c 8b       	std	Y+20, r25	; 0x14
    1c20:	8b 8b       	std	Y+19, r24	; 0x13
    1c22:	0f c0       	rjmp	.+30     	; 0x1c42 <LCD_DisplayCharacter+0x2c2>
    1c24:	89 e1       	ldi	r24, 0x19	; 25
    1c26:	90 e0       	ldi	r25, 0x00	; 0
    1c28:	9a 8b       	std	Y+18, r25	; 0x12
    1c2a:	89 8b       	std	Y+17, r24	; 0x11
    1c2c:	89 89       	ldd	r24, Y+17	; 0x11
    1c2e:	9a 89       	ldd	r25, Y+18	; 0x12
    1c30:	01 97       	sbiw	r24, 0x01	; 1
    1c32:	f1 f7       	brne	.-4      	; 0x1c30 <LCD_DisplayCharacter+0x2b0>
    1c34:	9a 8b       	std	Y+18, r25	; 0x12
    1c36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c38:	8b 89       	ldd	r24, Y+19	; 0x13
    1c3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c3c:	01 97       	sbiw	r24, 0x01	; 1
    1c3e:	9c 8b       	std	Y+20, r25	; 0x14
    1c40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c42:	8b 89       	ldd	r24, Y+19	; 0x13
    1c44:	9c 89       	ldd	r25, Y+20	; 0x14
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	69 f7       	brne	.-38     	; 0x1c24 <LCD_DisplayCharacter+0x2a4>
    1c4a:	14 c0       	rjmp	.+40     	; 0x1c74 <LCD_DisplayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c4c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c4e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c50:	8f 89       	ldd	r24, Y+23	; 0x17
    1c52:	98 8d       	ldd	r25, Y+24	; 0x18
    1c54:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	9c 8b       	std	Y+20, r25	; 0x14
    1c5e:	8b 8b       	std	Y+19, r24	; 0x13
    1c60:	8b 89       	ldd	r24, Y+19	; 0x13
    1c62:	9c 89       	ldd	r25, Y+20	; 0x14
    1c64:	98 8b       	std	Y+16, r25	; 0x10
    1c66:	8f 87       	std	Y+15, r24	; 0x0f
    1c68:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c6a:	98 89       	ldd	r25, Y+16	; 0x10
    1c6c:	01 97       	sbiw	r24, 0x01	; 1
    1c6e:	f1 f7       	brne	.-4      	; 0x1c6c <LCD_DisplayCharacter+0x2ec>
    1c70:	98 8b       	std	Y+16, r25	; 0x10
    1c72:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	CLEAR_BIT(LCD_CTRL_PORT,E);			//set E=0 to disable LCD
    1c74:	a2 e3       	ldi	r26, 0x32	; 50
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e2 e3       	ldi	r30, 0x32	; 50
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	8b 7f       	andi	r24, 0xFB	; 251
    1c80:	8c 93       	st	X, r24
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	a0 e8       	ldi	r26, 0x80	; 128
    1c88:	bf e3       	ldi	r27, 0x3F	; 63
    1c8a:	8b 87       	std	Y+11, r24	; 0x0b
    1c8c:	9c 87       	std	Y+12, r25	; 0x0c
    1c8e:	ad 87       	std	Y+13, r26	; 0x0d
    1c90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	4a e7       	ldi	r20, 0x7A	; 122
    1ca0:	53 e4       	ldi	r21, 0x43	; 67
    1ca2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	8f 83       	std	Y+7, r24	; 0x07
    1cac:	98 87       	std	Y+8, r25	; 0x08
    1cae:	a9 87       	std	Y+9, r26	; 0x09
    1cb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb4:	78 85       	ldd	r23, Y+8	; 0x08
    1cb6:	89 85       	ldd	r24, Y+9	; 0x09
    1cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e8       	ldi	r20, 0x80	; 128
    1cc0:	5f e3       	ldi	r21, 0x3F	; 63
    1cc2:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1cc6:	88 23       	and	r24, r24
    1cc8:	2c f4       	brge	.+10     	; 0x1cd4 <LCD_DisplayCharacter+0x354>
		__ticks = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	9e 83       	std	Y+6, r25	; 0x06
    1cd0:	8d 83       	std	Y+5, r24	; 0x05
    1cd2:	3f c0       	rjmp	.+126    	; 0x1d52 <LCD_DisplayCharacter+0x3d2>
	else if (__tmp > 65535)
    1cd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd6:	78 85       	ldd	r23, Y+8	; 0x08
    1cd8:	89 85       	ldd	r24, Y+9	; 0x09
    1cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	3f ef       	ldi	r19, 0xFF	; 255
    1ce0:	4f e7       	ldi	r20, 0x7F	; 127
    1ce2:	57 e4       	ldi	r21, 0x47	; 71
    1ce4:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1ce8:	18 16       	cp	r1, r24
    1cea:	4c f5       	brge	.+82     	; 0x1d3e <LCD_DisplayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e2       	ldi	r20, 0x20	; 32
    1cfa:	51 e4       	ldi	r21, 0x41	; 65
    1cfc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	bc 01       	movw	r22, r24
    1d06:	cd 01       	movw	r24, r26
    1d08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	9e 83       	std	Y+6, r25	; 0x06
    1d12:	8d 83       	std	Y+5, r24	; 0x05
    1d14:	0f c0       	rjmp	.+30     	; 0x1d34 <LCD_DisplayCharacter+0x3b4>
    1d16:	89 e1       	ldi	r24, 0x19	; 25
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	9c 83       	std	Y+4, r25	; 0x04
    1d1c:	8b 83       	std	Y+3, r24	; 0x03
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <LCD_DisplayCharacter+0x3a2>
    1d26:	9c 83       	std	Y+4, r25	; 0x04
    1d28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d34:	8d 81       	ldd	r24, Y+5	; 0x05
    1d36:	9e 81       	ldd	r25, Y+6	; 0x06
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	69 f7       	brne	.-38     	; 0x1d16 <LCD_DisplayCharacter+0x396>
    1d3c:	14 c0       	rjmp	.+40     	; 0x1d66 <LCD_DisplayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d40:	78 85       	ldd	r23, Y+8	; 0x08
    1d42:	89 85       	ldd	r24, Y+9	; 0x09
    1d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d46:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	9e 83       	std	Y+6, r25	; 0x06
    1d50:	8d 83       	std	Y+5, r24	; 0x05
    1d52:	8d 81       	ldd	r24, Y+5	; 0x05
    1d54:	9e 81       	ldd	r25, Y+6	; 0x06
    1d56:	9a 83       	std	Y+2, r25	; 0x02
    1d58:	89 83       	std	Y+1, r24	; 0x01
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <LCD_DisplayCharacter+0x3de>
    1d62:	9a 83       	std	Y+2, r25	; 0x02
    1d64:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1d66:	e9 96       	adiw	r28, 0x39	; 57
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	cf 91       	pop	r28
    1d74:	df 91       	pop	r29
    1d76:	08 95       	ret

00001d78 <LCD_init>:

void LCD_init(void){
    1d78:	df 93       	push	r29
    1d7a:	cf 93       	push	r28
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; 							//set all data pins as o/p pins
    1d80:	e4 e3       	ldi	r30, 0x34	; 52
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	8f ef       	ldi	r24, 0xFF	; 255
    1d86:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW);	//set control pins as o/p pins
    1d88:	a1 e3       	ldi	r26, 0x31	; 49
    1d8a:	b0 e0       	ldi	r27, 0x00	; 0
    1d8c:	e1 e3       	ldi	r30, 0x31	; 49
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	80 81       	ld	r24, Z
    1d92:	8c 61       	ori	r24, 0x1C	; 28
    1d94:	8c 93       	st	X, r24
	LCD_SendCommand(TWO_LINE_LCD_EIGHT_BIT_MODE);
    1d96:	88 e3       	ldi	r24, 0x38	; 56
    1d98:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_SendCommand>
	LCD_SendCommand(CURSOR_OFF);
    1d9c:	8c e0       	ldi	r24, 0x0C	; 12
    1d9e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_SendCommand>
	LCD_SendCommand(CLEAR_COMMAND);
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_SendCommand>
}
    1da8:	cf 91       	pop	r28
    1daa:	df 91       	pop	r29
    1dac:	08 95       	ret

00001dae <LCD_DisplayString>:

void LCD_DisplayString(u8 *str){
    1dae:	df 93       	push	r29
    1db0:	cf 93       	push	r28
    1db2:	00 d0       	rcall	.+0      	; 0x1db4 <LCD_DisplayString+0x6>
    1db4:	0f 92       	push	r0
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	9b 83       	std	Y+3, r25	; 0x03
    1dbc:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    1dbe:	19 82       	std	Y+1, r1	; 0x01
    1dc0:	0e c0       	rjmp	.+28     	; 0x1dde <LCD_DisplayString+0x30>
	while(str[i] != '\0'){
		LCD_DisplayCharacter(str[i]);
    1dc2:	89 81       	ldd	r24, Y+1	; 0x01
    1dc4:	28 2f       	mov	r18, r24
    1dc6:	30 e0       	ldi	r19, 0x00	; 0
    1dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dca:	9b 81       	ldd	r25, Y+3	; 0x03
    1dcc:	fc 01       	movw	r30, r24
    1dce:	e2 0f       	add	r30, r18
    1dd0:	f3 1f       	adc	r31, r19
    1dd2:	80 81       	ld	r24, Z
    1dd4:	0e 94 c0 0c 	call	0x1980	; 0x1980 <LCD_DisplayCharacter>
		i++;
    1dd8:	89 81       	ldd	r24, Y+1	; 0x01
    1dda:	8f 5f       	subi	r24, 0xFF	; 255
    1ddc:	89 83       	std	Y+1, r24	; 0x01
	LCD_SendCommand(CLEAR_COMMAND);
}

void LCD_DisplayString(u8 *str){
	u8 i=0;
	while(str[i] != '\0'){
    1dde:	89 81       	ldd	r24, Y+1	; 0x01
    1de0:	28 2f       	mov	r18, r24
    1de2:	30 e0       	ldi	r19, 0x00	; 0
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	9b 81       	ldd	r25, Y+3	; 0x03
    1de8:	fc 01       	movw	r30, r24
    1dea:	e2 0f       	add	r30, r18
    1dec:	f3 1f       	adc	r31, r19
    1dee:	80 81       	ld	r24, Z
    1df0:	88 23       	and	r24, r24
    1df2:	39 f7       	brne	.-50     	; 0x1dc2 <LCD_DisplayString+0x14>
		LCD_DisplayCharacter(str[i]);
		i++;
	}
}
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	0f 90       	pop	r0
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	08 95       	ret

00001e00 <LCD_GoToRowCol>:

void LCD_GoToRowCol(u8 row,u8 col){
    1e00:	df 93       	push	r29
    1e02:	cf 93       	push	r28
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <LCD_GoToRowCol+0x6>
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <LCD_GoToRowCol+0x8>
    1e08:	0f 92       	push	r0
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	8a 83       	std	Y+2, r24	; 0x02
    1e10:	6b 83       	std	Y+3, r22	; 0x03
	u8 address;
	switch(row){
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	3d 83       	std	Y+5, r19	; 0x05
    1e1a:	2c 83       	std	Y+4, r18	; 0x04
    1e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e20:	81 30       	cpi	r24, 0x01	; 1
    1e22:	91 05       	cpc	r25, r1
    1e24:	c1 f0       	breq	.+48     	; 0x1e56 <LCD_GoToRowCol+0x56>
    1e26:	2c 81       	ldd	r18, Y+4	; 0x04
    1e28:	3d 81       	ldd	r19, Y+5	; 0x05
    1e2a:	22 30       	cpi	r18, 0x02	; 2
    1e2c:	31 05       	cpc	r19, r1
    1e2e:	2c f4       	brge	.+10     	; 0x1e3a <LCD_GoToRowCol+0x3a>
    1e30:	8c 81       	ldd	r24, Y+4	; 0x04
    1e32:	9d 81       	ldd	r25, Y+5	; 0x05
    1e34:	00 97       	sbiw	r24, 0x00	; 0
    1e36:	61 f0       	breq	.+24     	; 0x1e50 <LCD_GoToRowCol+0x50>
    1e38:	19 c0       	rjmp	.+50     	; 0x1e6c <LCD_GoToRowCol+0x6c>
    1e3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1e3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1e3e:	22 30       	cpi	r18, 0x02	; 2
    1e40:	31 05       	cpc	r19, r1
    1e42:	69 f0       	breq	.+26     	; 0x1e5e <LCD_GoToRowCol+0x5e>
    1e44:	8c 81       	ldd	r24, Y+4	; 0x04
    1e46:	9d 81       	ldd	r25, Y+5	; 0x05
    1e48:	83 30       	cpi	r24, 0x03	; 3
    1e4a:	91 05       	cpc	r25, r1
    1e4c:	61 f0       	breq	.+24     	; 0x1e66 <LCD_GoToRowCol+0x66>
    1e4e:	0e c0       	rjmp	.+28     	; 0x1e6c <LCD_GoToRowCol+0x6c>
	case 0:
		address = col;
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	89 83       	std	Y+1, r24	; 0x01
    1e54:	0b c0       	rjmp	.+22     	; 0x1e6c <LCD_GoToRowCol+0x6c>
		break;
	case 1:
		address = col + 0x40;
    1e56:	8b 81       	ldd	r24, Y+3	; 0x03
    1e58:	80 5c       	subi	r24, 0xC0	; 192
    1e5a:	89 83       	std	Y+1, r24	; 0x01
    1e5c:	07 c0       	rjmp	.+14     	; 0x1e6c <LCD_GoToRowCol+0x6c>
		break;
	case 2:
		address = col + 0x10;
    1e5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e60:	80 5f       	subi	r24, 0xF0	; 240
    1e62:	89 83       	std	Y+1, r24	; 0x01
    1e64:	03 c0       	rjmp	.+6      	; 0x1e6c <LCD_GoToRowCol+0x6c>
		break;
	case 3:
		address = col + 0x50;
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	80 5b       	subi	r24, 0xB0	; 176
    1e6a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_SendCommand(SET_CURSOR_LOCATION | address);  	//set cursor location at the defined row&col
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	80 68       	ori	r24, 0x80	; 128
    1e70:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_SendCommand>
}
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	cf 91       	pop	r28
    1e80:	df 91       	pop	r29
    1e82:	08 95       	ret

00001e84 <LCD_ClearScreen>:

void LCD_ClearScreen(void){
    1e84:	df 93       	push	r29
    1e86:	cf 93       	push	r28
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
	LCD_SendCommand(CLEAR_COMMAND);
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <LCD_SendCommand>
}
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <LCD_DisplayStringRowCol>:

void LCD_DisplayStringRowCol(u8 row,u8 col,u8 *str){
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	00 d0       	rcall	.+0      	; 0x1e9e <LCD_DisplayStringRowCol+0x6>
    1e9e:	00 d0       	rcall	.+0      	; 0x1ea0 <LCD_DisplayStringRowCol+0x8>
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
    1ea4:	89 83       	std	Y+1, r24	; 0x01
    1ea6:	6a 83       	std	Y+2, r22	; 0x02
    1ea8:	5c 83       	std	Y+4, r21	; 0x04
    1eaa:	4b 83       	std	Y+3, r20	; 0x03
	LCD_GoToRowCol(row,col);
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	6a 81       	ldd	r22, Y+2	; 0x02
    1eb0:	0e 94 00 0f 	call	0x1e00	; 0x1e00 <LCD_GoToRowCol>
	LCD_DisplayString(str);
    1eb4:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb6:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb8:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_DisplayString>
}
    1ebc:	0f 90       	pop	r0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	cf 91       	pop	r28
    1ec6:	df 91       	pop	r29
    1ec8:	08 95       	ret

00001eca <LCD_IntToString>:

void LCD_IntToString (u32 value)
{
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    1ed2:	62 97       	sbiw	r28, 0x12	; 18
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	9a 8b       	std	Y+18, r25	; 0x12
    1ee0:	89 8b       	std	Y+17, r24	; 0x11
		}
		return;
	}
*/
	u8 buff[16];
	itoa(value,buff,10);
    1ee2:	89 89       	ldd	r24, Y+17	; 0x11
    1ee4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ee6:	9e 01       	movw	r18, r28
    1ee8:	2f 5f       	subi	r18, 0xFF	; 255
    1eea:	3f 4f       	sbci	r19, 0xFF	; 255
    1eec:	b9 01       	movw	r22, r18
    1eee:	4a e0       	ldi	r20, 0x0A	; 10
    1ef0:	50 e0       	ldi	r21, 0x00	; 0
    1ef2:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <itoa>
	LCD_DisplayString(buff);
    1ef6:	ce 01       	movw	r24, r28
    1ef8:	01 96       	adiw	r24, 0x01	; 1
    1efa:	0e 94 d7 0e 	call	0x1dae	; 0x1dae <LCD_DisplayString>
}
    1efe:	62 96       	adiw	r28, 0x12	; 18
    1f00:	0f b6       	in	r0, 0x3f	; 63
    1f02:	f8 94       	cli
    1f04:	de bf       	out	0x3e, r29	; 62
    1f06:	0f be       	out	0x3f, r0	; 63
    1f08:	cd bf       	out	0x3d, r28	; 61
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	08 95       	ret

00001f10 <__prologue_saves__>:
    1f10:	2f 92       	push	r2
    1f12:	3f 92       	push	r3
    1f14:	4f 92       	push	r4
    1f16:	5f 92       	push	r5
    1f18:	6f 92       	push	r6
    1f1a:	7f 92       	push	r7
    1f1c:	8f 92       	push	r8
    1f1e:	9f 92       	push	r9
    1f20:	af 92       	push	r10
    1f22:	bf 92       	push	r11
    1f24:	cf 92       	push	r12
    1f26:	df 92       	push	r13
    1f28:	ef 92       	push	r14
    1f2a:	ff 92       	push	r15
    1f2c:	0f 93       	push	r16
    1f2e:	1f 93       	push	r17
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
    1f34:	cd b7       	in	r28, 0x3d	; 61
    1f36:	de b7       	in	r29, 0x3e	; 62
    1f38:	ca 1b       	sub	r28, r26
    1f3a:	db 0b       	sbc	r29, r27
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	de bf       	out	0x3e, r29	; 62
    1f42:	0f be       	out	0x3f, r0	; 63
    1f44:	cd bf       	out	0x3d, r28	; 61
    1f46:	09 94       	ijmp

00001f48 <__epilogue_restores__>:
    1f48:	2a 88       	ldd	r2, Y+18	; 0x12
    1f4a:	39 88       	ldd	r3, Y+17	; 0x11
    1f4c:	48 88       	ldd	r4, Y+16	; 0x10
    1f4e:	5f 84       	ldd	r5, Y+15	; 0x0f
    1f50:	6e 84       	ldd	r6, Y+14	; 0x0e
    1f52:	7d 84       	ldd	r7, Y+13	; 0x0d
    1f54:	8c 84       	ldd	r8, Y+12	; 0x0c
    1f56:	9b 84       	ldd	r9, Y+11	; 0x0b
    1f58:	aa 84       	ldd	r10, Y+10	; 0x0a
    1f5a:	b9 84       	ldd	r11, Y+9	; 0x09
    1f5c:	c8 84       	ldd	r12, Y+8	; 0x08
    1f5e:	df 80       	ldd	r13, Y+7	; 0x07
    1f60:	ee 80       	ldd	r14, Y+6	; 0x06
    1f62:	fd 80       	ldd	r15, Y+5	; 0x05
    1f64:	0c 81       	ldd	r16, Y+4	; 0x04
    1f66:	1b 81       	ldd	r17, Y+3	; 0x03
    1f68:	aa 81       	ldd	r26, Y+2	; 0x02
    1f6a:	b9 81       	ldd	r27, Y+1	; 0x01
    1f6c:	ce 0f       	add	r28, r30
    1f6e:	d1 1d       	adc	r29, r1
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	ed 01       	movw	r28, r26
    1f7c:	08 95       	ret

00001f7e <itoa>:
    1f7e:	fb 01       	movw	r30, r22
    1f80:	9f 01       	movw	r18, r30
    1f82:	e8 94       	clt
    1f84:	42 30       	cpi	r20, 0x02	; 2
    1f86:	c4 f0       	brlt	.+48     	; 0x1fb8 <itoa+0x3a>
    1f88:	45 32       	cpi	r20, 0x25	; 37
    1f8a:	b4 f4       	brge	.+44     	; 0x1fb8 <itoa+0x3a>
    1f8c:	4a 30       	cpi	r20, 0x0A	; 10
    1f8e:	29 f4       	brne	.+10     	; 0x1f9a <itoa+0x1c>
    1f90:	97 fb       	bst	r25, 7
    1f92:	1e f4       	brtc	.+6      	; 0x1f9a <itoa+0x1c>
    1f94:	90 95       	com	r25
    1f96:	81 95       	neg	r24
    1f98:	9f 4f       	sbci	r25, 0xFF	; 255
    1f9a:	64 2f       	mov	r22, r20
    1f9c:	77 27       	eor	r23, r23
    1f9e:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <__udivmodhi4>
    1fa2:	80 5d       	subi	r24, 0xD0	; 208
    1fa4:	8a 33       	cpi	r24, 0x3A	; 58
    1fa6:	0c f0       	brlt	.+2      	; 0x1faa <itoa+0x2c>
    1fa8:	89 5d       	subi	r24, 0xD9	; 217
    1faa:	81 93       	st	Z+, r24
    1fac:	cb 01       	movw	r24, r22
    1fae:	00 97       	sbiw	r24, 0x00	; 0
    1fb0:	a1 f7       	brne	.-24     	; 0x1f9a <itoa+0x1c>
    1fb2:	16 f4       	brtc	.+4      	; 0x1fb8 <itoa+0x3a>
    1fb4:	5d e2       	ldi	r21, 0x2D	; 45
    1fb6:	51 93       	st	Z+, r21
    1fb8:	10 82       	st	Z, r1
    1fba:	c9 01       	movw	r24, r18
    1fbc:	0c 94 e0 0f 	jmp	0x1fc0	; 0x1fc0 <strrev>

00001fc0 <strrev>:
    1fc0:	dc 01       	movw	r26, r24
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	67 2f       	mov	r22, r23
    1fc6:	71 91       	ld	r23, Z+
    1fc8:	77 23       	and	r23, r23
    1fca:	e1 f7       	brne	.-8      	; 0x1fc4 <strrev+0x4>
    1fcc:	32 97       	sbiw	r30, 0x02	; 2
    1fce:	04 c0       	rjmp	.+8      	; 0x1fd8 <strrev+0x18>
    1fd0:	7c 91       	ld	r23, X
    1fd2:	6d 93       	st	X+, r22
    1fd4:	70 83       	st	Z, r23
    1fd6:	62 91       	ld	r22, -Z
    1fd8:	ae 17       	cp	r26, r30
    1fda:	bf 07       	cpc	r27, r31
    1fdc:	c8 f3       	brcs	.-14     	; 0x1fd0 <strrev+0x10>
    1fde:	08 95       	ret

00001fe0 <__udivmodhi4>:
    1fe0:	aa 1b       	sub	r26, r26
    1fe2:	bb 1b       	sub	r27, r27
    1fe4:	51 e1       	ldi	r21, 0x11	; 17
    1fe6:	07 c0       	rjmp	.+14     	; 0x1ff6 <__udivmodhi4_ep>

00001fe8 <__udivmodhi4_loop>:
    1fe8:	aa 1f       	adc	r26, r26
    1fea:	bb 1f       	adc	r27, r27
    1fec:	a6 17       	cp	r26, r22
    1fee:	b7 07       	cpc	r27, r23
    1ff0:	10 f0       	brcs	.+4      	; 0x1ff6 <__udivmodhi4_ep>
    1ff2:	a6 1b       	sub	r26, r22
    1ff4:	b7 0b       	sbc	r27, r23

00001ff6 <__udivmodhi4_ep>:
    1ff6:	88 1f       	adc	r24, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	5a 95       	dec	r21
    1ffc:	a9 f7       	brne	.-22     	; 0x1fe8 <__udivmodhi4_loop>
    1ffe:	80 95       	com	r24
    2000:	90 95       	com	r25
    2002:	bc 01       	movw	r22, r24
    2004:	cd 01       	movw	r24, r26
    2006:	08 95       	ret

00002008 <_exit>:
    2008:	f8 94       	cli

0000200a <__stop_program>:
    200a:	ff cf       	rjmp	.-2      	; 0x200a <__stop_program>
